
final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d4  00800060  00002e0e  00002ea2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800134  00800134  00002f76  2**0
                  ALLOC
  3 .stab         00002244  00000000  00000000  00002f78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000bc9  00000000  00000000  000051bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005d85  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006035  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008b69  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009918  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009d05  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a4d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e0       	ldi	r30, 0x0E	; 14
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 33       	cpi	r26, 0x34	; 52
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e3       	ldi	r26, 0x34	; 52
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 33       	cpi	r26, 0x3E	; 62
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 69 06 	call	0xcd2	; 0xcd2 <main>
      8a:	0c 94 05 17 	jmp	0x2e0a	; 0x2e0a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e2       	ldi	r26, 0x29	; 41
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8e 16 	jmp	0x2d1c	; 0x2d1c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8e 16 	jmp	0x2d1c	; 0x2d1c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	89 e2       	ldi	r24, 0x29	; 41
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8e 16 	jmp	0x2d1c	; 0x2d1c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8e 16 	jmp	0x2d1c	; 0x2d1c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8e 16 	jmp	0x2d1c	; 0x2d1c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_9>:
 */
#include "keypad.h"
#include "uart.h"
#include <string.h>
uint16 bot=0,i=0,count=0,time=0,bol=1,change=0;
ISR(TIMER0_OVF_vect){
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
     b70:	2e 97       	sbiw	r28, 0x0e	; 14
     b72:	de bf       	out	0x3e, r29	; 62
     b74:	cd bf       	out	0x3d, r28	; 61
	time++;
     b76:	80 91 3a 01 	lds	r24, 0x013A
     b7a:	90 91 3b 01 	lds	r25, 0x013B
     b7e:	01 96       	adiw	r24, 0x01	; 1
     b80:	90 93 3b 01 	sts	0x013B, r25
     b84:	80 93 3a 01 	sts	0x013A, r24
	if (time==120){
     b88:	80 91 3a 01 	lds	r24, 0x013A
     b8c:	90 91 3b 01 	lds	r25, 0x013B
     b90:	88 37       	cpi	r24, 0x78	; 120
     b92:	91 05       	cpc	r25, r1
     b94:	09 f0       	breq	.+2      	; 0xb98 <__vector_9+0x52>
     b96:	87 c0       	rjmp	.+270    	; 0xca6 <__vector_9+0x160>
		bol=1;
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	90 93 32 01 	sts	0x0132, r25
     ba0:	80 93 31 01 	sts	0x0131, r24

		LCD_clearScreen();
     ba4:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <LCD_clearScreen>
		LCD_displayString("*please enter your password*");
     ba8:	80 e6       	ldi	r24, 0x60	; 96
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <LCD_displayString>
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	aa ef       	ldi	r26, 0xFA	; 250
     bb6:	b3 e4       	ldi	r27, 0x43	; 67
     bb8:	8b 87       	std	Y+11, r24	; 0x0b
     bba:	9c 87       	std	Y+12, r25	; 0x0c
     bbc:	ad 87       	std	Y+13, r26	; 0x0d
     bbe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bc0:	6b 85       	ldd	r22, Y+11	; 0x0b
     bc2:	7c 85       	ldd	r23, Y+12	; 0x0c
     bc4:	8d 85       	ldd	r24, Y+13	; 0x0d
     bc6:	9e 85       	ldd	r25, Y+14	; 0x0e
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	4a e7       	ldi	r20, 0x7A	; 122
     bce:	53 e4       	ldi	r21, 0x43	; 67
     bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bd4:	dc 01       	movw	r26, r24
     bd6:	cb 01       	movw	r24, r22
     bd8:	8f 83       	std	Y+7, r24	; 0x07
     bda:	98 87       	std	Y+8, r25	; 0x08
     bdc:	a9 87       	std	Y+9, r26	; 0x09
     bde:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     be0:	6f 81       	ldd	r22, Y+7	; 0x07
     be2:	78 85       	ldd	r23, Y+8	; 0x08
     be4:	89 85       	ldd	r24, Y+9	; 0x09
     be6:	9a 85       	ldd	r25, Y+10	; 0x0a
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	40 e8       	ldi	r20, 0x80	; 128
     bee:	5f e3       	ldi	r21, 0x3F	; 63
     bf0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bf4:	88 23       	and	r24, r24
     bf6:	2c f4       	brge	.+10     	; 0xc02 <__vector_9+0xbc>
		__ticks = 1;
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	9e 83       	std	Y+6, r25	; 0x06
     bfe:	8d 83       	std	Y+5, r24	; 0x05
     c00:	3f c0       	rjmp	.+126    	; 0xc80 <__vector_9+0x13a>
	else if (__tmp > 65535)
     c02:	6f 81       	ldd	r22, Y+7	; 0x07
     c04:	78 85       	ldd	r23, Y+8	; 0x08
     c06:	89 85       	ldd	r24, Y+9	; 0x09
     c08:	9a 85       	ldd	r25, Y+10	; 0x0a
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	3f ef       	ldi	r19, 0xFF	; 255
     c0e:	4f e7       	ldi	r20, 0x7F	; 127
     c10:	57 e4       	ldi	r21, 0x47	; 71
     c12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c16:	18 16       	cp	r1, r24
     c18:	4c f5       	brge	.+82     	; 0xc6c <__vector_9+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c1a:	6b 85       	ldd	r22, Y+11	; 0x0b
     c1c:	7c 85       	ldd	r23, Y+12	; 0x0c
     c1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     c20:	9e 85       	ldd	r25, Y+14	; 0x0e
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	40 e2       	ldi	r20, 0x20	; 32
     c28:	51 e4       	ldi	r21, 0x41	; 65
     c2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c2e:	dc 01       	movw	r26, r24
     c30:	cb 01       	movw	r24, r22
     c32:	bc 01       	movw	r22, r24
     c34:	cd 01       	movw	r24, r26
     c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c3a:	dc 01       	movw	r26, r24
     c3c:	cb 01       	movw	r24, r22
     c3e:	9e 83       	std	Y+6, r25	; 0x06
     c40:	8d 83       	std	Y+5, r24	; 0x05
     c42:	0f c0       	rjmp	.+30     	; 0xc62 <__vector_9+0x11c>
     c44:	89 e1       	ldi	r24, 0x19	; 25
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	9c 83       	std	Y+4, r25	; 0x04
     c4a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c4c:	8b 81       	ldd	r24, Y+3	; 0x03
     c4e:	9c 81       	ldd	r25, Y+4	; 0x04
     c50:	01 97       	sbiw	r24, 0x01	; 1
     c52:	f1 f7       	brne	.-4      	; 0xc50 <__vector_9+0x10a>
     c54:	9c 83       	std	Y+4, r25	; 0x04
     c56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c58:	8d 81       	ldd	r24, Y+5	; 0x05
     c5a:	9e 81       	ldd	r25, Y+6	; 0x06
     c5c:	01 97       	sbiw	r24, 0x01	; 1
     c5e:	9e 83       	std	Y+6, r25	; 0x06
     c60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c62:	8d 81       	ldd	r24, Y+5	; 0x05
     c64:	9e 81       	ldd	r25, Y+6	; 0x06
     c66:	00 97       	sbiw	r24, 0x00	; 0
     c68:	69 f7       	brne	.-38     	; 0xc44 <__vector_9+0xfe>
     c6a:	14 c0       	rjmp	.+40     	; 0xc94 <__vector_9+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c6c:	6f 81       	ldd	r22, Y+7	; 0x07
     c6e:	78 85       	ldd	r23, Y+8	; 0x08
     c70:	89 85       	ldd	r24, Y+9	; 0x09
     c72:	9a 85       	ldd	r25, Y+10	; 0x0a
     c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c78:	dc 01       	movw	r26, r24
     c7a:	cb 01       	movw	r24, r22
     c7c:	9e 83       	std	Y+6, r25	; 0x06
     c7e:	8d 83       	std	Y+5, r24	; 0x05
     c80:	8d 81       	ldd	r24, Y+5	; 0x05
     c82:	9e 81       	ldd	r25, Y+6	; 0x06
     c84:	9a 83       	std	Y+2, r25	; 0x02
     c86:	89 83       	std	Y+1, r24	; 0x01
     c88:	89 81       	ldd	r24, Y+1	; 0x01
     c8a:	9a 81       	ldd	r25, Y+2	; 0x02
     c8c:	01 97       	sbiw	r24, 0x01	; 1
     c8e:	f1 f7       	brne	.-4      	; 0xc8c <__vector_9+0x146>
     c90:	9a 83       	std	Y+2, r25	; 0x02
     c92:	89 83       	std	Y+1, r24	; 0x01
		 _delay_ms(500);
		 LCD_clearScreen();
     c94:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <LCD_clearScreen>
		CLEAR_BIT(TIMSK,TOIE0);
     c98:	a9 e5       	ldi	r26, 0x59	; 89
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	e9 e5       	ldi	r30, 0x59	; 89
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	8e 7f       	andi	r24, 0xFE	; 254
     ca4:	8c 93       	st	X, r24

	}
}
     ca6:	2e 96       	adiw	r28, 0x0e	; 14
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	cd bf       	out	0x3d, r28	; 61
     cac:	cf 91       	pop	r28
     cae:	df 91       	pop	r29
     cb0:	ff 91       	pop	r31
     cb2:	ef 91       	pop	r30
     cb4:	bf 91       	pop	r27
     cb6:	af 91       	pop	r26
     cb8:	9f 91       	pop	r25
     cba:	8f 91       	pop	r24
     cbc:	7f 91       	pop	r23
     cbe:	6f 91       	pop	r22
     cc0:	5f 91       	pop	r21
     cc2:	4f 91       	pop	r20
     cc4:	3f 91       	pop	r19
     cc6:	2f 91       	pop	r18
     cc8:	0f 90       	pop	r0
     cca:	0f be       	out	0x3f, r0	; 63
     ccc:	0f 90       	pop	r0
     cce:	1f 90       	pop	r1
     cd0:	18 95       	reti

00000cd2 <main>:
int main(void)
{
     cd2:	0f 93       	push	r16
     cd4:	1f 93       	push	r17
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	c9 57       	subi	r28, 0x79	; 121
     ce0:	d0 40       	sbci	r29, 0x00	; 0
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	f8 94       	cli
     ce6:	de bf       	out	0x3e, r29	; 62
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	cd bf       	out	0x3d, r28	; 61
	SET_BIT(TCCR0,FOC0);SET_BIT(TCCR0,CS02);SET_BIT(TCCR0,CS00);SET_BIT(SREG,7);
     cec:	a3 e5       	ldi	r26, 0x53	; 83
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e3 e5       	ldi	r30, 0x53	; 83
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	80 68       	ori	r24, 0x80	; 128
     cf8:	8c 93       	st	X, r24
     cfa:	a3 e5       	ldi	r26, 0x53	; 83
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e3 e5       	ldi	r30, 0x53	; 83
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	84 60       	ori	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	a3 e5       	ldi	r26, 0x53	; 83
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e3 e5       	ldi	r30, 0x53	; 83
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	81 60       	ori	r24, 0x01	; 1
     d14:	8c 93       	st	X, r24
     d16:	af e5       	ldi	r26, 0x5F	; 95
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	ef e5       	ldi	r30, 0x5F	; 95
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	80 68       	ori	r24, 0x80	; 128
     d22:	8c 93       	st	X, r24
	TCNT0=6;
     d24:	e2 e5       	ldi	r30, 0x52	; 82
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	86 e0       	ldi	r24, 0x06	; 6
     d2a:	80 83       	st	Z, r24
	uint8 key[9];
	UART_init();
     d2c:	0e 94 d6 15 	call	0x2bac	; 0x2bac <UART_init>
	LCD_init();
     d30:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <LCD_init>
	LCD_sendCommand(0x01);
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <LCD_sendCommand>
	LCD_displayString("*press 1 to set a password*");
     d3c:	8d e7       	ldi	r24, 0x7D	; 125
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <LCD_displayString>
     d44:	fe 01       	movw	r30, r28
     d46:	e3 59       	subi	r30, 0x93	; 147
     d48:	ff 4f       	sbci	r31, 0xFF	; 255
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	aa e7       	ldi	r26, 0x7A	; 122
     d50:	b4 e4       	ldi	r27, 0x44	; 68
     d52:	80 83       	st	Z, r24
     d54:	91 83       	std	Z+1, r25	; 0x01
     d56:	a2 83       	std	Z+2, r26	; 0x02
     d58:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d5a:	8e 01       	movw	r16, r28
     d5c:	07 59       	subi	r16, 0x97	; 151
     d5e:	1f 4f       	sbci	r17, 0xFF	; 255
     d60:	fe 01       	movw	r30, r28
     d62:	e3 59       	subi	r30, 0x93	; 147
     d64:	ff 4f       	sbci	r31, 0xFF	; 255
     d66:	60 81       	ld	r22, Z
     d68:	71 81       	ldd	r23, Z+1	; 0x01
     d6a:	82 81       	ldd	r24, Z+2	; 0x02
     d6c:	93 81       	ldd	r25, Z+3	; 0x03
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	4a e7       	ldi	r20, 0x7A	; 122
     d74:	53 e4       	ldi	r21, 0x43	; 67
     d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d7a:	dc 01       	movw	r26, r24
     d7c:	cb 01       	movw	r24, r22
     d7e:	f8 01       	movw	r30, r16
     d80:	80 83       	st	Z, r24
     d82:	91 83       	std	Z+1, r25	; 0x01
     d84:	a2 83       	std	Z+2, r26	; 0x02
     d86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d88:	fe 01       	movw	r30, r28
     d8a:	e7 59       	subi	r30, 0x97	; 151
     d8c:	ff 4f       	sbci	r31, 0xFF	; 255
     d8e:	60 81       	ld	r22, Z
     d90:	71 81       	ldd	r23, Z+1	; 0x01
     d92:	82 81       	ldd	r24, Z+2	; 0x02
     d94:	93 81       	ldd	r25, Z+3	; 0x03
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	40 e8       	ldi	r20, 0x80	; 128
     d9c:	5f e3       	ldi	r21, 0x3F	; 63
     d9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     da2:	88 23       	and	r24, r24
     da4:	44 f4       	brge	.+16     	; 0xdb6 <main+0xe4>
		__ticks = 1;
     da6:	fe 01       	movw	r30, r28
     da8:	e9 59       	subi	r30, 0x99	; 153
     daa:	ff 4f       	sbci	r31, 0xFF	; 255
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	91 83       	std	Z+1, r25	; 0x01
     db2:	80 83       	st	Z, r24
     db4:	64 c0       	rjmp	.+200    	; 0xe7e <main+0x1ac>
	else if (__tmp > 65535)
     db6:	fe 01       	movw	r30, r28
     db8:	e7 59       	subi	r30, 0x97	; 151
     dba:	ff 4f       	sbci	r31, 0xFF	; 255
     dbc:	60 81       	ld	r22, Z
     dbe:	71 81       	ldd	r23, Z+1	; 0x01
     dc0:	82 81       	ldd	r24, Z+2	; 0x02
     dc2:	93 81       	ldd	r25, Z+3	; 0x03
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	3f ef       	ldi	r19, 0xFF	; 255
     dc8:	4f e7       	ldi	r20, 0x7F	; 127
     dca:	57 e4       	ldi	r21, 0x47	; 71
     dcc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dd0:	18 16       	cp	r1, r24
     dd2:	0c f0       	brlt	.+2      	; 0xdd6 <main+0x104>
     dd4:	43 c0       	rjmp	.+134    	; 0xe5c <main+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dd6:	fe 01       	movw	r30, r28
     dd8:	e3 59       	subi	r30, 0x93	; 147
     dda:	ff 4f       	sbci	r31, 0xFF	; 255
     ddc:	60 81       	ld	r22, Z
     dde:	71 81       	ldd	r23, Z+1	; 0x01
     de0:	82 81       	ldd	r24, Z+2	; 0x02
     de2:	93 81       	ldd	r25, Z+3	; 0x03
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	40 e2       	ldi	r20, 0x20	; 32
     dea:	51 e4       	ldi	r21, 0x41	; 65
     dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df0:	dc 01       	movw	r26, r24
     df2:	cb 01       	movw	r24, r22
     df4:	8e 01       	movw	r16, r28
     df6:	09 59       	subi	r16, 0x99	; 153
     df8:	1f 4f       	sbci	r17, 0xFF	; 255
     dfa:	bc 01       	movw	r22, r24
     dfc:	cd 01       	movw	r24, r26
     dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e02:	dc 01       	movw	r26, r24
     e04:	cb 01       	movw	r24, r22
     e06:	f8 01       	movw	r30, r16
     e08:	91 83       	std	Z+1, r25	; 0x01
     e0a:	80 83       	st	Z, r24
     e0c:	1f c0       	rjmp	.+62     	; 0xe4c <main+0x17a>
     e0e:	fe 01       	movw	r30, r28
     e10:	eb 59       	subi	r30, 0x9B	; 155
     e12:	ff 4f       	sbci	r31, 0xFF	; 255
     e14:	89 e1       	ldi	r24, 0x19	; 25
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	91 83       	std	Z+1, r25	; 0x01
     e1a:	80 83       	st	Z, r24
     e1c:	fe 01       	movw	r30, r28
     e1e:	eb 59       	subi	r30, 0x9B	; 155
     e20:	ff 4f       	sbci	r31, 0xFF	; 255
     e22:	80 81       	ld	r24, Z
     e24:	91 81       	ldd	r25, Z+1	; 0x01
     e26:	01 97       	sbiw	r24, 0x01	; 1
     e28:	f1 f7       	brne	.-4      	; 0xe26 <main+0x154>
     e2a:	fe 01       	movw	r30, r28
     e2c:	eb 59       	subi	r30, 0x9B	; 155
     e2e:	ff 4f       	sbci	r31, 0xFF	; 255
     e30:	91 83       	std	Z+1, r25	; 0x01
     e32:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e34:	de 01       	movw	r26, r28
     e36:	a9 59       	subi	r26, 0x99	; 153
     e38:	bf 4f       	sbci	r27, 0xFF	; 255
     e3a:	fe 01       	movw	r30, r28
     e3c:	e9 59       	subi	r30, 0x99	; 153
     e3e:	ff 4f       	sbci	r31, 0xFF	; 255
     e40:	80 81       	ld	r24, Z
     e42:	91 81       	ldd	r25, Z+1	; 0x01
     e44:	01 97       	sbiw	r24, 0x01	; 1
     e46:	11 96       	adiw	r26, 0x01	; 1
     e48:	9c 93       	st	X, r25
     e4a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e4c:	fe 01       	movw	r30, r28
     e4e:	e9 59       	subi	r30, 0x99	; 153
     e50:	ff 4f       	sbci	r31, 0xFF	; 255
     e52:	80 81       	ld	r24, Z
     e54:	91 81       	ldd	r25, Z+1	; 0x01
     e56:	00 97       	sbiw	r24, 0x00	; 0
     e58:	d1 f6       	brne	.-76     	; 0xe0e <main+0x13c>
     e5a:	27 c0       	rjmp	.+78     	; 0xeaa <main+0x1d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e5c:	8e 01       	movw	r16, r28
     e5e:	09 59       	subi	r16, 0x99	; 153
     e60:	1f 4f       	sbci	r17, 0xFF	; 255
     e62:	fe 01       	movw	r30, r28
     e64:	e7 59       	subi	r30, 0x97	; 151
     e66:	ff 4f       	sbci	r31, 0xFF	; 255
     e68:	60 81       	ld	r22, Z
     e6a:	71 81       	ldd	r23, Z+1	; 0x01
     e6c:	82 81       	ldd	r24, Z+2	; 0x02
     e6e:	93 81       	ldd	r25, Z+3	; 0x03
     e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e74:	dc 01       	movw	r26, r24
     e76:	cb 01       	movw	r24, r22
     e78:	f8 01       	movw	r30, r16
     e7a:	91 83       	std	Z+1, r25	; 0x01
     e7c:	80 83       	st	Z, r24
     e7e:	de 01       	movw	r26, r28
     e80:	ad 59       	subi	r26, 0x9D	; 157
     e82:	bf 4f       	sbci	r27, 0xFF	; 255
     e84:	fe 01       	movw	r30, r28
     e86:	e9 59       	subi	r30, 0x99	; 153
     e88:	ff 4f       	sbci	r31, 0xFF	; 255
     e8a:	80 81       	ld	r24, Z
     e8c:	91 81       	ldd	r25, Z+1	; 0x01
     e8e:	8d 93       	st	X+, r24
     e90:	9c 93       	st	X, r25
     e92:	fe 01       	movw	r30, r28
     e94:	ed 59       	subi	r30, 0x9D	; 157
     e96:	ff 4f       	sbci	r31, 0xFF	; 255
     e98:	80 81       	ld	r24, Z
     e9a:	91 81       	ldd	r25, Z+1	; 0x01
     e9c:	01 97       	sbiw	r24, 0x01	; 1
     e9e:	f1 f7       	brne	.-4      	; 0xe9c <main+0x1ca>
     ea0:	fe 01       	movw	r30, r28
     ea2:	ed 59       	subi	r30, 0x9D	; 157
     ea4:	ff 4f       	sbci	r31, 0xFF	; 255
     ea6:	91 83       	std	Z+1, r25	; 0x01
     ea8:	80 83       	st	Z, r24
	    	_delay_ms(1000);
	    	LCD_clearScreen();
     eaa:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <LCD_clearScreen>

    while(1)
    {
    	if(count==3){
     eae:	80 91 38 01 	lds	r24, 0x0138
     eb2:	90 91 39 01 	lds	r25, 0x0139
     eb6:	83 30       	cpi	r24, 0x03	; 3
     eb8:	91 05       	cpc	r25, r1
     eba:	99 f4       	brne	.+38     	; 0xee2 <main+0x210>
    		SET_BIT(TIMSK,TOIE0);
     ebc:	a9 e5       	ldi	r26, 0x59	; 89
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e9 e5       	ldi	r30, 0x59	; 89
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	81 60       	ori	r24, 0x01	; 1
     ec8:	8c 93       	st	X, r24
    		LCD_displayString("wait 30 seconds");
     eca:	89 e9       	ldi	r24, 0x99	; 153
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <LCD_displayString>
    		bol=0;
     ed2:	10 92 32 01 	sts	0x0132, r1
     ed6:	10 92 31 01 	sts	0x0131, r1
    		count=0;
     eda:	10 92 39 01 	sts	0x0139, r1
     ede:	10 92 38 01 	sts	0x0138, r1
    	}
    	if(bol==1){
     ee2:	80 91 31 01 	lds	r24, 0x0131
     ee6:	90 91 32 01 	lds	r25, 0x0132
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	91 05       	cpc	r25, r1
     eee:	f9 f6       	brne	.-66     	; 0xeae <main+0x1dc>
    		bot=KeyPad_getPressedKey();
     ef0:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <KeyPad_getPressedKey>
     ef4:	88 2f       	mov	r24, r24
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	90 93 35 01 	sts	0x0135, r25
     efc:	80 93 34 01 	sts	0x0134, r24
    		    	if(bot==12){
     f00:	80 91 34 01 	lds	r24, 0x0134
     f04:	90 91 35 01 	lds	r25, 0x0135
     f08:	8c 30       	cpi	r24, 0x0C	; 12
     f0a:	91 05       	cpc	r25, r1
     f0c:	09 f0       	breq	.+2      	; 0xf10 <main+0x23e>
     f0e:	da c3       	rjmp	.+1972   	; 0x16c4 <main+0x9f2>
    		    		key[i]='#';
     f10:	20 91 36 01 	lds	r18, 0x0136
     f14:	30 91 37 01 	lds	r19, 0x0137
     f18:	ce 01       	movw	r24, r28
     f1a:	8f 58       	subi	r24, 0x8F	; 143
     f1c:	9f 4f       	sbci	r25, 0xFF	; 255
     f1e:	fc 01       	movw	r30, r24
     f20:	e2 0f       	add	r30, r18
     f22:	f3 1f       	adc	r31, r19
     f24:	83 e2       	ldi	r24, 0x23	; 35
     f26:	80 83       	st	Z, r24
    		    		UART_sendString(key);
     f28:	ce 01       	movw	r24, r28
     f2a:	8f 58       	subi	r24, 0x8F	; 143
     f2c:	9f 4f       	sbci	r25, 0xFF	; 255
     f2e:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <UART_sendString>
    		    		LCD_clearScreen();
     f32:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <LCD_clearScreen>
    		    		  memset(key,'\0',8*9);
     f36:	ce 01       	movw	r24, r28
     f38:	8f 58       	subi	r24, 0x8F	; 143
     f3a:	9f 4f       	sbci	r25, 0xFF	; 255
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	70 e0       	ldi	r23, 0x00	; 0
     f40:	48 e4       	ldi	r20, 0x48	; 72
     f42:	50 e0       	ldi	r21, 0x00	; 0
     f44:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <memset>
    		     	      i=0;
     f48:	10 92 37 01 	sts	0x0137, r1
     f4c:	10 92 36 01 	sts	0x0136, r1
    		    		if(change==1){
     f50:	80 91 3c 01 	lds	r24, 0x013C
     f54:	90 91 3d 01 	lds	r25, 0x013D
     f58:	81 30       	cpi	r24, 0x01	; 1
     f5a:	91 05       	cpc	r25, r1
     f5c:	09 f0       	breq	.+2      	; 0xf60 <main+0x28e>
     f5e:	79 c1       	rjmp	.+754    	; 0x1252 <main+0x580>
    		    			LCD_clearScreen();
     f60:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <LCD_clearScreen>
    		    		   	LCD_displayString("password changed");
     f64:	89 ea       	ldi	r24, 0xA9	; 169
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <LCD_displayString>
     f6c:	fe 01       	movw	r30, r28
     f6e:	e1 5a       	subi	r30, 0xA1	; 161
     f70:	ff 4f       	sbci	r31, 0xFF	; 255
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	aa ef       	ldi	r26, 0xFA	; 250
     f78:	b3 e4       	ldi	r27, 0x43	; 67
     f7a:	80 83       	st	Z, r24
     f7c:	91 83       	std	Z+1, r25	; 0x01
     f7e:	a2 83       	std	Z+2, r26	; 0x02
     f80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f82:	8e 01       	movw	r16, r28
     f84:	05 5a       	subi	r16, 0xA5	; 165
     f86:	1f 4f       	sbci	r17, 0xFF	; 255
     f88:	fe 01       	movw	r30, r28
     f8a:	e1 5a       	subi	r30, 0xA1	; 161
     f8c:	ff 4f       	sbci	r31, 0xFF	; 255
     f8e:	60 81       	ld	r22, Z
     f90:	71 81       	ldd	r23, Z+1	; 0x01
     f92:	82 81       	ldd	r24, Z+2	; 0x02
     f94:	93 81       	ldd	r25, Z+3	; 0x03
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	4a e7       	ldi	r20, 0x7A	; 122
     f9c:	53 e4       	ldi	r21, 0x43	; 67
     f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa2:	dc 01       	movw	r26, r24
     fa4:	cb 01       	movw	r24, r22
     fa6:	f8 01       	movw	r30, r16
     fa8:	80 83       	st	Z, r24
     faa:	91 83       	std	Z+1, r25	; 0x01
     fac:	a2 83       	std	Z+2, r26	; 0x02
     fae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     fb0:	fe 01       	movw	r30, r28
     fb2:	e5 5a       	subi	r30, 0xA5	; 165
     fb4:	ff 4f       	sbci	r31, 0xFF	; 255
     fb6:	60 81       	ld	r22, Z
     fb8:	71 81       	ldd	r23, Z+1	; 0x01
     fba:	82 81       	ldd	r24, Z+2	; 0x02
     fbc:	93 81       	ldd	r25, Z+3	; 0x03
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	40 e8       	ldi	r20, 0x80	; 128
     fc4:	5f e3       	ldi	r21, 0x3F	; 63
     fc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fca:	88 23       	and	r24, r24
     fcc:	44 f4       	brge	.+16     	; 0xfde <main+0x30c>
		__ticks = 1;
     fce:	fe 01       	movw	r30, r28
     fd0:	e7 5a       	subi	r30, 0xA7	; 167
     fd2:	ff 4f       	sbci	r31, 0xFF	; 255
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	91 83       	std	Z+1, r25	; 0x01
     fda:	80 83       	st	Z, r24
     fdc:	64 c0       	rjmp	.+200    	; 0x10a6 <main+0x3d4>
	else if (__tmp > 65535)
     fde:	fe 01       	movw	r30, r28
     fe0:	e5 5a       	subi	r30, 0xA5	; 165
     fe2:	ff 4f       	sbci	r31, 0xFF	; 255
     fe4:	60 81       	ld	r22, Z
     fe6:	71 81       	ldd	r23, Z+1	; 0x01
     fe8:	82 81       	ldd	r24, Z+2	; 0x02
     fea:	93 81       	ldd	r25, Z+3	; 0x03
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	3f ef       	ldi	r19, 0xFF	; 255
     ff0:	4f e7       	ldi	r20, 0x7F	; 127
     ff2:	57 e4       	ldi	r21, 0x47	; 71
     ff4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ff8:	18 16       	cp	r1, r24
     ffa:	0c f0       	brlt	.+2      	; 0xffe <main+0x32c>
     ffc:	43 c0       	rjmp	.+134    	; 0x1084 <main+0x3b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ffe:	fe 01       	movw	r30, r28
    1000:	e1 5a       	subi	r30, 0xA1	; 161
    1002:	ff 4f       	sbci	r31, 0xFF	; 255
    1004:	60 81       	ld	r22, Z
    1006:	71 81       	ldd	r23, Z+1	; 0x01
    1008:	82 81       	ldd	r24, Z+2	; 0x02
    100a:	93 81       	ldd	r25, Z+3	; 0x03
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	40 e2       	ldi	r20, 0x20	; 32
    1012:	51 e4       	ldi	r21, 0x41	; 65
    1014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1018:	dc 01       	movw	r26, r24
    101a:	cb 01       	movw	r24, r22
    101c:	8e 01       	movw	r16, r28
    101e:	07 5a       	subi	r16, 0xA7	; 167
    1020:	1f 4f       	sbci	r17, 0xFF	; 255
    1022:	bc 01       	movw	r22, r24
    1024:	cd 01       	movw	r24, r26
    1026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    102a:	dc 01       	movw	r26, r24
    102c:	cb 01       	movw	r24, r22
    102e:	f8 01       	movw	r30, r16
    1030:	91 83       	std	Z+1, r25	; 0x01
    1032:	80 83       	st	Z, r24
    1034:	1f c0       	rjmp	.+62     	; 0x1074 <main+0x3a2>
    1036:	fe 01       	movw	r30, r28
    1038:	e9 5a       	subi	r30, 0xA9	; 169
    103a:	ff 4f       	sbci	r31, 0xFF	; 255
    103c:	89 e1       	ldi	r24, 0x19	; 25
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	91 83       	std	Z+1, r25	; 0x01
    1042:	80 83       	st	Z, r24
    1044:	fe 01       	movw	r30, r28
    1046:	e9 5a       	subi	r30, 0xA9	; 169
    1048:	ff 4f       	sbci	r31, 0xFF	; 255
    104a:	80 81       	ld	r24, Z
    104c:	91 81       	ldd	r25, Z+1	; 0x01
    104e:	01 97       	sbiw	r24, 0x01	; 1
    1050:	f1 f7       	brne	.-4      	; 0x104e <main+0x37c>
    1052:	fe 01       	movw	r30, r28
    1054:	e9 5a       	subi	r30, 0xA9	; 169
    1056:	ff 4f       	sbci	r31, 0xFF	; 255
    1058:	91 83       	std	Z+1, r25	; 0x01
    105a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    105c:	de 01       	movw	r26, r28
    105e:	a7 5a       	subi	r26, 0xA7	; 167
    1060:	bf 4f       	sbci	r27, 0xFF	; 255
    1062:	fe 01       	movw	r30, r28
    1064:	e7 5a       	subi	r30, 0xA7	; 167
    1066:	ff 4f       	sbci	r31, 0xFF	; 255
    1068:	80 81       	ld	r24, Z
    106a:	91 81       	ldd	r25, Z+1	; 0x01
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	11 96       	adiw	r26, 0x01	; 1
    1070:	9c 93       	st	X, r25
    1072:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1074:	fe 01       	movw	r30, r28
    1076:	e7 5a       	subi	r30, 0xA7	; 167
    1078:	ff 4f       	sbci	r31, 0xFF	; 255
    107a:	80 81       	ld	r24, Z
    107c:	91 81       	ldd	r25, Z+1	; 0x01
    107e:	00 97       	sbiw	r24, 0x00	; 0
    1080:	d1 f6       	brne	.-76     	; 0x1036 <main+0x364>
    1082:	27 c0       	rjmp	.+78     	; 0x10d2 <main+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1084:	8e 01       	movw	r16, r28
    1086:	07 5a       	subi	r16, 0xA7	; 167
    1088:	1f 4f       	sbci	r17, 0xFF	; 255
    108a:	fe 01       	movw	r30, r28
    108c:	e5 5a       	subi	r30, 0xA5	; 165
    108e:	ff 4f       	sbci	r31, 0xFF	; 255
    1090:	60 81       	ld	r22, Z
    1092:	71 81       	ldd	r23, Z+1	; 0x01
    1094:	82 81       	ldd	r24, Z+2	; 0x02
    1096:	93 81       	ldd	r25, Z+3	; 0x03
    1098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    109c:	dc 01       	movw	r26, r24
    109e:	cb 01       	movw	r24, r22
    10a0:	f8 01       	movw	r30, r16
    10a2:	91 83       	std	Z+1, r25	; 0x01
    10a4:	80 83       	st	Z, r24
    10a6:	de 01       	movw	r26, r28
    10a8:	ab 5a       	subi	r26, 0xAB	; 171
    10aa:	bf 4f       	sbci	r27, 0xFF	; 255
    10ac:	fe 01       	movw	r30, r28
    10ae:	e7 5a       	subi	r30, 0xA7	; 167
    10b0:	ff 4f       	sbci	r31, 0xFF	; 255
    10b2:	80 81       	ld	r24, Z
    10b4:	91 81       	ldd	r25, Z+1	; 0x01
    10b6:	8d 93       	st	X+, r24
    10b8:	9c 93       	st	X, r25
    10ba:	fe 01       	movw	r30, r28
    10bc:	eb 5a       	subi	r30, 0xAB	; 171
    10be:	ff 4f       	sbci	r31, 0xFF	; 255
    10c0:	80 81       	ld	r24, Z
    10c2:	91 81       	ldd	r25, Z+1	; 0x01
    10c4:	01 97       	sbiw	r24, 0x01	; 1
    10c6:	f1 f7       	brne	.-4      	; 0x10c4 <main+0x3f2>
    10c8:	fe 01       	movw	r30, r28
    10ca:	eb 5a       	subi	r30, 0xAB	; 171
    10cc:	ff 4f       	sbci	r31, 0xFF	; 255
    10ce:	91 83       	std	Z+1, r25	; 0x01
    10d0:	80 83       	st	Z, r24
    		    	        _delay_ms(500);
    		     		    LCD_clearScreen();
    10d2:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <LCD_clearScreen>
    		     		   LCD_displayString("*please enter your password*");
    10d6:	80 e6       	ldi	r24, 0x60	; 96
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <LCD_displayString>
    10de:	fe 01       	movw	r30, r28
    10e0:	ef 5a       	subi	r30, 0xAF	; 175
    10e2:	ff 4f       	sbci	r31, 0xFF	; 255
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	aa ef       	ldi	r26, 0xFA	; 250
    10ea:	b3 e4       	ldi	r27, 0x43	; 67
    10ec:	80 83       	st	Z, r24
    10ee:	91 83       	std	Z+1, r25	; 0x01
    10f0:	a2 83       	std	Z+2, r26	; 0x02
    10f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10f4:	8e 01       	movw	r16, r28
    10f6:	03 5b       	subi	r16, 0xB3	; 179
    10f8:	1f 4f       	sbci	r17, 0xFF	; 255
    10fa:	fe 01       	movw	r30, r28
    10fc:	ef 5a       	subi	r30, 0xAF	; 175
    10fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1100:	60 81       	ld	r22, Z
    1102:	71 81       	ldd	r23, Z+1	; 0x01
    1104:	82 81       	ldd	r24, Z+2	; 0x02
    1106:	93 81       	ldd	r25, Z+3	; 0x03
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	4a e7       	ldi	r20, 0x7A	; 122
    110e:	53 e4       	ldi	r21, 0x43	; 67
    1110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1114:	dc 01       	movw	r26, r24
    1116:	cb 01       	movw	r24, r22
    1118:	f8 01       	movw	r30, r16
    111a:	80 83       	st	Z, r24
    111c:	91 83       	std	Z+1, r25	; 0x01
    111e:	a2 83       	std	Z+2, r26	; 0x02
    1120:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1122:	fe 01       	movw	r30, r28
    1124:	e3 5b       	subi	r30, 0xB3	; 179
    1126:	ff 4f       	sbci	r31, 0xFF	; 255
    1128:	60 81       	ld	r22, Z
    112a:	71 81       	ldd	r23, Z+1	; 0x01
    112c:	82 81       	ldd	r24, Z+2	; 0x02
    112e:	93 81       	ldd	r25, Z+3	; 0x03
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	40 e8       	ldi	r20, 0x80	; 128
    1136:	5f e3       	ldi	r21, 0x3F	; 63
    1138:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    113c:	88 23       	and	r24, r24
    113e:	44 f4       	brge	.+16     	; 0x1150 <main+0x47e>
		__ticks = 1;
    1140:	fe 01       	movw	r30, r28
    1142:	e5 5b       	subi	r30, 0xB5	; 181
    1144:	ff 4f       	sbci	r31, 0xFF	; 255
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	91 83       	std	Z+1, r25	; 0x01
    114c:	80 83       	st	Z, r24
    114e:	64 c0       	rjmp	.+200    	; 0x1218 <main+0x546>
	else if (__tmp > 65535)
    1150:	fe 01       	movw	r30, r28
    1152:	e3 5b       	subi	r30, 0xB3	; 179
    1154:	ff 4f       	sbci	r31, 0xFF	; 255
    1156:	60 81       	ld	r22, Z
    1158:	71 81       	ldd	r23, Z+1	; 0x01
    115a:	82 81       	ldd	r24, Z+2	; 0x02
    115c:	93 81       	ldd	r25, Z+3	; 0x03
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	3f ef       	ldi	r19, 0xFF	; 255
    1162:	4f e7       	ldi	r20, 0x7F	; 127
    1164:	57 e4       	ldi	r21, 0x47	; 71
    1166:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    116a:	18 16       	cp	r1, r24
    116c:	0c f0       	brlt	.+2      	; 0x1170 <main+0x49e>
    116e:	43 c0       	rjmp	.+134    	; 0x11f6 <main+0x524>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1170:	fe 01       	movw	r30, r28
    1172:	ef 5a       	subi	r30, 0xAF	; 175
    1174:	ff 4f       	sbci	r31, 0xFF	; 255
    1176:	60 81       	ld	r22, Z
    1178:	71 81       	ldd	r23, Z+1	; 0x01
    117a:	82 81       	ldd	r24, Z+2	; 0x02
    117c:	93 81       	ldd	r25, Z+3	; 0x03
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	40 e2       	ldi	r20, 0x20	; 32
    1184:	51 e4       	ldi	r21, 0x41	; 65
    1186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	8e 01       	movw	r16, r28
    1190:	05 5b       	subi	r16, 0xB5	; 181
    1192:	1f 4f       	sbci	r17, 0xFF	; 255
    1194:	bc 01       	movw	r22, r24
    1196:	cd 01       	movw	r24, r26
    1198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    119c:	dc 01       	movw	r26, r24
    119e:	cb 01       	movw	r24, r22
    11a0:	f8 01       	movw	r30, r16
    11a2:	91 83       	std	Z+1, r25	; 0x01
    11a4:	80 83       	st	Z, r24
    11a6:	1f c0       	rjmp	.+62     	; 0x11e6 <main+0x514>
    11a8:	fe 01       	movw	r30, r28
    11aa:	e7 5b       	subi	r30, 0xB7	; 183
    11ac:	ff 4f       	sbci	r31, 0xFF	; 255
    11ae:	89 e1       	ldi	r24, 0x19	; 25
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	91 83       	std	Z+1, r25	; 0x01
    11b4:	80 83       	st	Z, r24
    11b6:	fe 01       	movw	r30, r28
    11b8:	e7 5b       	subi	r30, 0xB7	; 183
    11ba:	ff 4f       	sbci	r31, 0xFF	; 255
    11bc:	80 81       	ld	r24, Z
    11be:	91 81       	ldd	r25, Z+1	; 0x01
    11c0:	01 97       	sbiw	r24, 0x01	; 1
    11c2:	f1 f7       	brne	.-4      	; 0x11c0 <main+0x4ee>
    11c4:	fe 01       	movw	r30, r28
    11c6:	e7 5b       	subi	r30, 0xB7	; 183
    11c8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ca:	91 83       	std	Z+1, r25	; 0x01
    11cc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ce:	de 01       	movw	r26, r28
    11d0:	a5 5b       	subi	r26, 0xB5	; 181
    11d2:	bf 4f       	sbci	r27, 0xFF	; 255
    11d4:	fe 01       	movw	r30, r28
    11d6:	e5 5b       	subi	r30, 0xB5	; 181
    11d8:	ff 4f       	sbci	r31, 0xFF	; 255
    11da:	80 81       	ld	r24, Z
    11dc:	91 81       	ldd	r25, Z+1	; 0x01
    11de:	01 97       	sbiw	r24, 0x01	; 1
    11e0:	11 96       	adiw	r26, 0x01	; 1
    11e2:	9c 93       	st	X, r25
    11e4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e6:	fe 01       	movw	r30, r28
    11e8:	e5 5b       	subi	r30, 0xB5	; 181
    11ea:	ff 4f       	sbci	r31, 0xFF	; 255
    11ec:	80 81       	ld	r24, Z
    11ee:	91 81       	ldd	r25, Z+1	; 0x01
    11f0:	00 97       	sbiw	r24, 0x00	; 0
    11f2:	d1 f6       	brne	.-76     	; 0x11a8 <main+0x4d6>
    11f4:	27 c0       	rjmp	.+78     	; 0x1244 <main+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11f6:	8e 01       	movw	r16, r28
    11f8:	05 5b       	subi	r16, 0xB5	; 181
    11fa:	1f 4f       	sbci	r17, 0xFF	; 255
    11fc:	fe 01       	movw	r30, r28
    11fe:	e3 5b       	subi	r30, 0xB3	; 179
    1200:	ff 4f       	sbci	r31, 0xFF	; 255
    1202:	60 81       	ld	r22, Z
    1204:	71 81       	ldd	r23, Z+1	; 0x01
    1206:	82 81       	ldd	r24, Z+2	; 0x02
    1208:	93 81       	ldd	r25, Z+3	; 0x03
    120a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	f8 01       	movw	r30, r16
    1214:	91 83       	std	Z+1, r25	; 0x01
    1216:	80 83       	st	Z, r24
    1218:	de 01       	movw	r26, r28
    121a:	a9 5b       	subi	r26, 0xB9	; 185
    121c:	bf 4f       	sbci	r27, 0xFF	; 255
    121e:	fe 01       	movw	r30, r28
    1220:	e5 5b       	subi	r30, 0xB5	; 181
    1222:	ff 4f       	sbci	r31, 0xFF	; 255
    1224:	80 81       	ld	r24, Z
    1226:	91 81       	ldd	r25, Z+1	; 0x01
    1228:	8d 93       	st	X+, r24
    122a:	9c 93       	st	X, r25
    122c:	fe 01       	movw	r30, r28
    122e:	e9 5b       	subi	r30, 0xB9	; 185
    1230:	ff 4f       	sbci	r31, 0xFF	; 255
    1232:	80 81       	ld	r24, Z
    1234:	91 81       	ldd	r25, Z+1	; 0x01
    1236:	01 97       	sbiw	r24, 0x01	; 1
    1238:	f1 f7       	brne	.-4      	; 0x1236 <main+0x564>
    123a:	fe 01       	movw	r30, r28
    123c:	e9 5b       	subi	r30, 0xB9	; 185
    123e:	ff 4f       	sbci	r31, 0xFF	; 255
    1240:	91 83       	std	Z+1, r25	; 0x01
    1242:	80 83       	st	Z, r24
    		     		  _delay_ms(500);
    		     		   LCD_clearScreen();
    1244:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <LCD_clearScreen>
    		     		    change=0;
    1248:	10 92 3d 01 	sts	0x013D, r1
    124c:	10 92 3c 01 	sts	0x013C, r1
    1250:	55 c2       	rjmp	.+1194   	; 0x16fc <main+0xa2a>
    		    		}
    		    		else{
    		    			if(UART_recieveByte()==1){
    1252:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <UART_recieveByte>
    1256:	81 30       	cpi	r24, 0x01	; 1
    1258:	09 f0       	breq	.+2      	; 0x125c <main+0x58a>
    125a:	b2 c1       	rjmp	.+868    	; 0x15c0 <main+0x8ee>
    		    	    		LCD_displayString("correct password");
    125c:	8a eb       	ldi	r24, 0xBA	; 186
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <LCD_displayString>
    1264:	fe 01       	movw	r30, r28
    1266:	ed 5b       	subi	r30, 0xBD	; 189
    1268:	ff 4f       	sbci	r31, 0xFF	; 255
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	aa ef       	ldi	r26, 0xFA	; 250
    1270:	b3 e4       	ldi	r27, 0x43	; 67
    1272:	80 83       	st	Z, r24
    1274:	91 83       	std	Z+1, r25	; 0x01
    1276:	a2 83       	std	Z+2, r26	; 0x02
    1278:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    127a:	8e 01       	movw	r16, r28
    127c:	01 5c       	subi	r16, 0xC1	; 193
    127e:	1f 4f       	sbci	r17, 0xFF	; 255
    1280:	fe 01       	movw	r30, r28
    1282:	ed 5b       	subi	r30, 0xBD	; 189
    1284:	ff 4f       	sbci	r31, 0xFF	; 255
    1286:	60 81       	ld	r22, Z
    1288:	71 81       	ldd	r23, Z+1	; 0x01
    128a:	82 81       	ldd	r24, Z+2	; 0x02
    128c:	93 81       	ldd	r25, Z+3	; 0x03
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	4a e7       	ldi	r20, 0x7A	; 122
    1294:	53 e4       	ldi	r21, 0x43	; 67
    1296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	f8 01       	movw	r30, r16
    12a0:	80 83       	st	Z, r24
    12a2:	91 83       	std	Z+1, r25	; 0x01
    12a4:	a2 83       	std	Z+2, r26	; 0x02
    12a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12a8:	fe 01       	movw	r30, r28
    12aa:	ff 96       	adiw	r30, 0x3f	; 63
    12ac:	60 81       	ld	r22, Z
    12ae:	71 81       	ldd	r23, Z+1	; 0x01
    12b0:	82 81       	ldd	r24, Z+2	; 0x02
    12b2:	93 81       	ldd	r25, Z+3	; 0x03
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	40 e8       	ldi	r20, 0x80	; 128
    12ba:	5f e3       	ldi	r21, 0x3F	; 63
    12bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12c0:	88 23       	and	r24, r24
    12c2:	2c f4       	brge	.+10     	; 0x12ce <main+0x5fc>
		__ticks = 1;
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	9e af       	std	Y+62, r25	; 0x3e
    12ca:	8d af       	std	Y+61, r24	; 0x3d
    12cc:	46 c0       	rjmp	.+140    	; 0x135a <main+0x688>
	else if (__tmp > 65535)
    12ce:	fe 01       	movw	r30, r28
    12d0:	ff 96       	adiw	r30, 0x3f	; 63
    12d2:	60 81       	ld	r22, Z
    12d4:	71 81       	ldd	r23, Z+1	; 0x01
    12d6:	82 81       	ldd	r24, Z+2	; 0x02
    12d8:	93 81       	ldd	r25, Z+3	; 0x03
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	3f ef       	ldi	r19, 0xFF	; 255
    12de:	4f e7       	ldi	r20, 0x7F	; 127
    12e0:	57 e4       	ldi	r21, 0x47	; 71
    12e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12e6:	18 16       	cp	r1, r24
    12e8:	64 f5       	brge	.+88     	; 0x1342 <main+0x670>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ea:	fe 01       	movw	r30, r28
    12ec:	ed 5b       	subi	r30, 0xBD	; 189
    12ee:	ff 4f       	sbci	r31, 0xFF	; 255
    12f0:	60 81       	ld	r22, Z
    12f2:	71 81       	ldd	r23, Z+1	; 0x01
    12f4:	82 81       	ldd	r24, Z+2	; 0x02
    12f6:	93 81       	ldd	r25, Z+3	; 0x03
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	40 e2       	ldi	r20, 0x20	; 32
    12fe:	51 e4       	ldi	r21, 0x41	; 65
    1300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	bc 01       	movw	r22, r24
    130a:	cd 01       	movw	r24, r26
    130c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	9e af       	std	Y+62, r25	; 0x3e
    1316:	8d af       	std	Y+61, r24	; 0x3d
    1318:	0f c0       	rjmp	.+30     	; 0x1338 <main+0x666>
    131a:	89 e1       	ldi	r24, 0x19	; 25
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	9c af       	std	Y+60, r25	; 0x3c
    1320:	8b af       	std	Y+59, r24	; 0x3b
    1322:	8b ad       	ldd	r24, Y+59	; 0x3b
    1324:	9c ad       	ldd	r25, Y+60	; 0x3c
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	f1 f7       	brne	.-4      	; 0x1326 <main+0x654>
    132a:	9c af       	std	Y+60, r25	; 0x3c
    132c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    132e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1330:	9e ad       	ldd	r25, Y+62	; 0x3e
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	9e af       	std	Y+62, r25	; 0x3e
    1336:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1338:	8d ad       	ldd	r24, Y+61	; 0x3d
    133a:	9e ad       	ldd	r25, Y+62	; 0x3e
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	69 f7       	brne	.-38     	; 0x131a <main+0x648>
    1340:	16 c0       	rjmp	.+44     	; 0x136e <main+0x69c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1342:	fe 01       	movw	r30, r28
    1344:	ff 96       	adiw	r30, 0x3f	; 63
    1346:	60 81       	ld	r22, Z
    1348:	71 81       	ldd	r23, Z+1	; 0x01
    134a:	82 81       	ldd	r24, Z+2	; 0x02
    134c:	93 81       	ldd	r25, Z+3	; 0x03
    134e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1352:	dc 01       	movw	r26, r24
    1354:	cb 01       	movw	r24, r22
    1356:	9e af       	std	Y+62, r25	; 0x3e
    1358:	8d af       	std	Y+61, r24	; 0x3d
    135a:	8d ad       	ldd	r24, Y+61	; 0x3d
    135c:	9e ad       	ldd	r25, Y+62	; 0x3e
    135e:	9a af       	std	Y+58, r25	; 0x3a
    1360:	89 af       	std	Y+57, r24	; 0x39
    1362:	89 ad       	ldd	r24, Y+57	; 0x39
    1364:	9a ad       	ldd	r25, Y+58	; 0x3a
    1366:	01 97       	sbiw	r24, 0x01	; 1
    1368:	f1 f7       	brne	.-4      	; 0x1366 <main+0x694>
    136a:	9a af       	std	Y+58, r25	; 0x3a
    136c:	89 af       	std	Y+57, r24	; 0x39
    		    			    		    	_delay_ms(500);
    		    			 		LCD_clearScreen();
    136e:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <LCD_clearScreen>
    		 	    		        LCD_displayString("1-open the door");
    1372:	8b ec       	ldi	r24, 0xCB	; 203
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <LCD_displayString>
    		    			    	 LCD_displayStringRowColumn(1,0,"2-change password");
    137a:	2b ed       	ldi	r18, 0xDB	; 219
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	60 e0       	ldi	r22, 0x00	; 0
    1384:	70 e0       	ldi	r23, 0x00	; 0
    1386:	a9 01       	movw	r20, r18
    1388:	0e 94 90 15 	call	0x2b20	; 0x2b20 <LCD_displayStringRowColumn>
    		    			   		bot=KeyPad_getPressedKey();
    138c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <KeyPad_getPressedKey>
    1390:	88 2f       	mov	r24, r24
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	90 93 35 01 	sts	0x0135, r25
    1398:	80 93 34 01 	sts	0x0134, r24
    		    			  		UART_sendByte(bot);
    139c:	80 91 34 01 	lds	r24, 0x0134
    13a0:	90 91 35 01 	lds	r25, 0x0135
    13a4:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <UART_sendByte>
  			    		   	if(bot==1){
    13a8:	80 91 34 01 	lds	r24, 0x0134
    13ac:	90 91 35 01 	lds	r25, 0x0135
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	91 05       	cpc	r25, r1
    13b4:	09 f0       	breq	.+2      	; 0x13b8 <main+0x6e6>
    13b6:	7b c0       	rjmp	.+246    	; 0x14ae <main+0x7dc>
    		      		        LCD_clearScreen();
    13b8:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <LCD_clearScreen>
    		    	  			LCD_displayString("the door is open");
    13bc:	8d ee       	ldi	r24, 0xED	; 237
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <LCD_displayString>
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	aa ef       	ldi	r26, 0xFA	; 250
    13ca:	b3 e4       	ldi	r27, 0x43	; 67
    13cc:	8d ab       	std	Y+53, r24	; 0x35
    13ce:	9e ab       	std	Y+54, r25	; 0x36
    13d0:	af ab       	std	Y+55, r26	; 0x37
    13d2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d4:	6d a9       	ldd	r22, Y+53	; 0x35
    13d6:	7e a9       	ldd	r23, Y+54	; 0x36
    13d8:	8f a9       	ldd	r24, Y+55	; 0x37
    13da:	98 ad       	ldd	r25, Y+56	; 0x38
    13dc:	20 e0       	ldi	r18, 0x00	; 0
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	4a e7       	ldi	r20, 0x7A	; 122
    13e2:	53 e4       	ldi	r21, 0x43	; 67
    13e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e8:	dc 01       	movw	r26, r24
    13ea:	cb 01       	movw	r24, r22
    13ec:	89 ab       	std	Y+49, r24	; 0x31
    13ee:	9a ab       	std	Y+50, r25	; 0x32
    13f0:	ab ab       	std	Y+51, r26	; 0x33
    13f2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    13f4:	69 a9       	ldd	r22, Y+49	; 0x31
    13f6:	7a a9       	ldd	r23, Y+50	; 0x32
    13f8:	8b a9       	ldd	r24, Y+51	; 0x33
    13fa:	9c a9       	ldd	r25, Y+52	; 0x34
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	40 e8       	ldi	r20, 0x80	; 128
    1402:	5f e3       	ldi	r21, 0x3F	; 63
    1404:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1408:	88 23       	and	r24, r24
    140a:	2c f4       	brge	.+10     	; 0x1416 <main+0x744>
		__ticks = 1;
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	98 ab       	std	Y+48, r25	; 0x30
    1412:	8f a7       	std	Y+47, r24	; 0x2f
    1414:	3f c0       	rjmp	.+126    	; 0x1494 <main+0x7c2>
	else if (__tmp > 65535)
    1416:	69 a9       	ldd	r22, Y+49	; 0x31
    1418:	7a a9       	ldd	r23, Y+50	; 0x32
    141a:	8b a9       	ldd	r24, Y+51	; 0x33
    141c:	9c a9       	ldd	r25, Y+52	; 0x34
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	3f ef       	ldi	r19, 0xFF	; 255
    1422:	4f e7       	ldi	r20, 0x7F	; 127
    1424:	57 e4       	ldi	r21, 0x47	; 71
    1426:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    142a:	18 16       	cp	r1, r24
    142c:	4c f5       	brge	.+82     	; 0x1480 <main+0x7ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    142e:	6d a9       	ldd	r22, Y+53	; 0x35
    1430:	7e a9       	ldd	r23, Y+54	; 0x36
    1432:	8f a9       	ldd	r24, Y+55	; 0x37
    1434:	98 ad       	ldd	r25, Y+56	; 0x38
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	40 e2       	ldi	r20, 0x20	; 32
    143c:	51 e4       	ldi	r21, 0x41	; 65
    143e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	bc 01       	movw	r22, r24
    1448:	cd 01       	movw	r24, r26
    144a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	98 ab       	std	Y+48, r25	; 0x30
    1454:	8f a7       	std	Y+47, r24	; 0x2f
    1456:	0f c0       	rjmp	.+30     	; 0x1476 <main+0x7a4>
    1458:	89 e1       	ldi	r24, 0x19	; 25
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	9e a7       	std	Y+46, r25	; 0x2e
    145e:	8d a7       	std	Y+45, r24	; 0x2d
    1460:	8d a5       	ldd	r24, Y+45	; 0x2d
    1462:	9e a5       	ldd	r25, Y+46	; 0x2e
    1464:	01 97       	sbiw	r24, 0x01	; 1
    1466:	f1 f7       	brne	.-4      	; 0x1464 <main+0x792>
    1468:	9e a7       	std	Y+46, r25	; 0x2e
    146a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    146c:	8f a5       	ldd	r24, Y+47	; 0x2f
    146e:	98 a9       	ldd	r25, Y+48	; 0x30
    1470:	01 97       	sbiw	r24, 0x01	; 1
    1472:	98 ab       	std	Y+48, r25	; 0x30
    1474:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1476:	8f a5       	ldd	r24, Y+47	; 0x2f
    1478:	98 a9       	ldd	r25, Y+48	; 0x30
    147a:	00 97       	sbiw	r24, 0x00	; 0
    147c:	69 f7       	brne	.-38     	; 0x1458 <main+0x786>
    147e:	14 c0       	rjmp	.+40     	; 0x14a8 <main+0x7d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1480:	69 a9       	ldd	r22, Y+49	; 0x31
    1482:	7a a9       	ldd	r23, Y+50	; 0x32
    1484:	8b a9       	ldd	r24, Y+51	; 0x33
    1486:	9c a9       	ldd	r25, Y+52	; 0x34
    1488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    148c:	dc 01       	movw	r26, r24
    148e:	cb 01       	movw	r24, r22
    1490:	98 ab       	std	Y+48, r25	; 0x30
    1492:	8f a7       	std	Y+47, r24	; 0x2f
    1494:	8f a5       	ldd	r24, Y+47	; 0x2f
    1496:	98 a9       	ldd	r25, Y+48	; 0x30
    1498:	9c a7       	std	Y+44, r25	; 0x2c
    149a:	8b a7       	std	Y+43, r24	; 0x2b
    149c:	8b a5       	ldd	r24, Y+43	; 0x2b
    149e:	9c a5       	ldd	r25, Y+44	; 0x2c
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	f1 f7       	brne	.-4      	; 0x14a0 <main+0x7ce>
    14a4:	9c a7       	std	Y+44, r25	; 0x2c
    14a6:	8b a7       	std	Y+43, r24	; 0x2b
    		    		_delay_ms(500);
    		    			  	LCD_clearScreen();
    14a8:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <LCD_clearScreen>
    14ac:	27 c1       	rjmp	.+590    	; 0x16fc <main+0xa2a>
    		    			    		    		    }
    		    			 else if(bot==2){
    14ae:	80 91 34 01 	lds	r24, 0x0134
    14b2:	90 91 35 01 	lds	r25, 0x0135
    14b6:	82 30       	cpi	r24, 0x02	; 2
    14b8:	91 05       	cpc	r25, r1
    14ba:	09 f0       	breq	.+2      	; 0x14be <main+0x7ec>
    14bc:	1f c1       	rjmp	.+574    	; 0x16fc <main+0xa2a>
    		    			    		    LCD_clearScreen();
    14be:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <LCD_clearScreen>
    		    			    		    LCD_displayString("enter your new password");
    14c2:	8e ef       	ldi	r24, 0xFE	; 254
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <LCD_displayString>
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	aa ef       	ldi	r26, 0xFA	; 250
    14d0:	b3 e4       	ldi	r27, 0x43	; 67
    14d2:	8f a3       	std	Y+39, r24	; 0x27
    14d4:	98 a7       	std	Y+40, r25	; 0x28
    14d6:	a9 a7       	std	Y+41, r26	; 0x29
    14d8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14da:	6f a1       	ldd	r22, Y+39	; 0x27
    14dc:	78 a5       	ldd	r23, Y+40	; 0x28
    14de:	89 a5       	ldd	r24, Y+41	; 0x29
    14e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	4a e7       	ldi	r20, 0x7A	; 122
    14e8:	53 e4       	ldi	r21, 0x43	; 67
    14ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	8b a3       	std	Y+35, r24	; 0x23
    14f4:	9c a3       	std	Y+36, r25	; 0x24
    14f6:	ad a3       	std	Y+37, r26	; 0x25
    14f8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14fa:	6b a1       	ldd	r22, Y+35	; 0x23
    14fc:	7c a1       	ldd	r23, Y+36	; 0x24
    14fe:	8d a1       	ldd	r24, Y+37	; 0x25
    1500:	9e a1       	ldd	r25, Y+38	; 0x26
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	40 e8       	ldi	r20, 0x80	; 128
    1508:	5f e3       	ldi	r21, 0x3F	; 63
    150a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    150e:	88 23       	and	r24, r24
    1510:	2c f4       	brge	.+10     	; 0x151c <main+0x84a>
		__ticks = 1;
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	9a a3       	std	Y+34, r25	; 0x22
    1518:	89 a3       	std	Y+33, r24	; 0x21
    151a:	3f c0       	rjmp	.+126    	; 0x159a <main+0x8c8>
	else if (__tmp > 65535)
    151c:	6b a1       	ldd	r22, Y+35	; 0x23
    151e:	7c a1       	ldd	r23, Y+36	; 0x24
    1520:	8d a1       	ldd	r24, Y+37	; 0x25
    1522:	9e a1       	ldd	r25, Y+38	; 0x26
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	3f ef       	ldi	r19, 0xFF	; 255
    1528:	4f e7       	ldi	r20, 0x7F	; 127
    152a:	57 e4       	ldi	r21, 0x47	; 71
    152c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1530:	18 16       	cp	r1, r24
    1532:	4c f5       	brge	.+82     	; 0x1586 <main+0x8b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1534:	6f a1       	ldd	r22, Y+39	; 0x27
    1536:	78 a5       	ldd	r23, Y+40	; 0x28
    1538:	89 a5       	ldd	r24, Y+41	; 0x29
    153a:	9a a5       	ldd	r25, Y+42	; 0x2a
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	40 e2       	ldi	r20, 0x20	; 32
    1542:	51 e4       	ldi	r21, 0x41	; 65
    1544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	bc 01       	movw	r22, r24
    154e:	cd 01       	movw	r24, r26
    1550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	9a a3       	std	Y+34, r25	; 0x22
    155a:	89 a3       	std	Y+33, r24	; 0x21
    155c:	0f c0       	rjmp	.+30     	; 0x157c <main+0x8aa>
    155e:	89 e1       	ldi	r24, 0x19	; 25
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	98 a3       	std	Y+32, r25	; 0x20
    1564:	8f 8f       	std	Y+31, r24	; 0x1f
    1566:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1568:	98 a1       	ldd	r25, Y+32	; 0x20
    156a:	01 97       	sbiw	r24, 0x01	; 1
    156c:	f1 f7       	brne	.-4      	; 0x156a <main+0x898>
    156e:	98 a3       	std	Y+32, r25	; 0x20
    1570:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1572:	89 a1       	ldd	r24, Y+33	; 0x21
    1574:	9a a1       	ldd	r25, Y+34	; 0x22
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	9a a3       	std	Y+34, r25	; 0x22
    157a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    157c:	89 a1       	ldd	r24, Y+33	; 0x21
    157e:	9a a1       	ldd	r25, Y+34	; 0x22
    1580:	00 97       	sbiw	r24, 0x00	; 0
    1582:	69 f7       	brne	.-38     	; 0x155e <main+0x88c>
    1584:	14 c0       	rjmp	.+40     	; 0x15ae <main+0x8dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1586:	6b a1       	ldd	r22, Y+35	; 0x23
    1588:	7c a1       	ldd	r23, Y+36	; 0x24
    158a:	8d a1       	ldd	r24, Y+37	; 0x25
    158c:	9e a1       	ldd	r25, Y+38	; 0x26
    158e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	9a a3       	std	Y+34, r25	; 0x22
    1598:	89 a3       	std	Y+33, r24	; 0x21
    159a:	89 a1       	ldd	r24, Y+33	; 0x21
    159c:	9a a1       	ldd	r25, Y+34	; 0x22
    159e:	9e 8f       	std	Y+30, r25	; 0x1e
    15a0:	8d 8f       	std	Y+29, r24	; 0x1d
    15a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15a6:	01 97       	sbiw	r24, 0x01	; 1
    15a8:	f1 f7       	brne	.-4      	; 0x15a6 <main+0x8d4>
    15aa:	9e 8f       	std	Y+30, r25	; 0x1e
    15ac:	8d 8f       	std	Y+29, r24	; 0x1d
    		    			    		    _delay_ms(500);
    		    	   		     		   LCD_clearScreen();
    15ae:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <LCD_clearScreen>
    		    			       			change=1;
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	90 93 3d 01 	sts	0x013D, r25
    15ba:	80 93 3c 01 	sts	0x013C, r24
    15be:	9e c0       	rjmp	.+316    	; 0x16fc <main+0xa2a>
    		    			    		    		    		    		}

    		    			    		    		    		    	}
    		    			   else{
    		    				   LCD_displayString("incorrect password");
    15c0:	86 e1       	ldi	r24, 0x16	; 22
    15c2:	91 e0       	ldi	r25, 0x01	; 1
    15c4:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <LCD_displayString>
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	aa ef       	ldi	r26, 0xFA	; 250
    15ce:	b3 e4       	ldi	r27, 0x43	; 67
    15d0:	89 8f       	std	Y+25, r24	; 0x19
    15d2:	9a 8f       	std	Y+26, r25	; 0x1a
    15d4:	ab 8f       	std	Y+27, r26	; 0x1b
    15d6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d8:	69 8d       	ldd	r22, Y+25	; 0x19
    15da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	4a e7       	ldi	r20, 0x7A	; 122
    15e6:	53 e4       	ldi	r21, 0x43	; 67
    15e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ec:	dc 01       	movw	r26, r24
    15ee:	cb 01       	movw	r24, r22
    15f0:	8d 8b       	std	Y+21, r24	; 0x15
    15f2:	9e 8b       	std	Y+22, r25	; 0x16
    15f4:	af 8b       	std	Y+23, r26	; 0x17
    15f6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15f8:	6d 89       	ldd	r22, Y+21	; 0x15
    15fa:	7e 89       	ldd	r23, Y+22	; 0x16
    15fc:	8f 89       	ldd	r24, Y+23	; 0x17
    15fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	40 e8       	ldi	r20, 0x80	; 128
    1606:	5f e3       	ldi	r21, 0x3F	; 63
    1608:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    160c:	88 23       	and	r24, r24
    160e:	2c f4       	brge	.+10     	; 0x161a <main+0x948>
		__ticks = 1;
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	9c 8b       	std	Y+20, r25	; 0x14
    1616:	8b 8b       	std	Y+19, r24	; 0x13
    1618:	3f c0       	rjmp	.+126    	; 0x1698 <main+0x9c6>
	else if (__tmp > 65535)
    161a:	6d 89       	ldd	r22, Y+21	; 0x15
    161c:	7e 89       	ldd	r23, Y+22	; 0x16
    161e:	8f 89       	ldd	r24, Y+23	; 0x17
    1620:	98 8d       	ldd	r25, Y+24	; 0x18
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	3f ef       	ldi	r19, 0xFF	; 255
    1626:	4f e7       	ldi	r20, 0x7F	; 127
    1628:	57 e4       	ldi	r21, 0x47	; 71
    162a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    162e:	18 16       	cp	r1, r24
    1630:	4c f5       	brge	.+82     	; 0x1684 <main+0x9b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1632:	69 8d       	ldd	r22, Y+25	; 0x19
    1634:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1636:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1638:	9c 8d       	ldd	r25, Y+28	; 0x1c
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	40 e2       	ldi	r20, 0x20	; 32
    1640:	51 e4       	ldi	r21, 0x41	; 65
    1642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	bc 01       	movw	r22, r24
    164c:	cd 01       	movw	r24, r26
    164e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1652:	dc 01       	movw	r26, r24
    1654:	cb 01       	movw	r24, r22
    1656:	9c 8b       	std	Y+20, r25	; 0x14
    1658:	8b 8b       	std	Y+19, r24	; 0x13
    165a:	0f c0       	rjmp	.+30     	; 0x167a <main+0x9a8>
    165c:	89 e1       	ldi	r24, 0x19	; 25
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	9a 8b       	std	Y+18, r25	; 0x12
    1662:	89 8b       	std	Y+17, r24	; 0x11
    1664:	89 89       	ldd	r24, Y+17	; 0x11
    1666:	9a 89       	ldd	r25, Y+18	; 0x12
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	f1 f7       	brne	.-4      	; 0x1668 <main+0x996>
    166c:	9a 8b       	std	Y+18, r25	; 0x12
    166e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1670:	8b 89       	ldd	r24, Y+19	; 0x13
    1672:	9c 89       	ldd	r25, Y+20	; 0x14
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	9c 8b       	std	Y+20, r25	; 0x14
    1678:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    167a:	8b 89       	ldd	r24, Y+19	; 0x13
    167c:	9c 89       	ldd	r25, Y+20	; 0x14
    167e:	00 97       	sbiw	r24, 0x00	; 0
    1680:	69 f7       	brne	.-38     	; 0x165c <main+0x98a>
    1682:	14 c0       	rjmp	.+40     	; 0x16ac <main+0x9da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1684:	6d 89       	ldd	r22, Y+21	; 0x15
    1686:	7e 89       	ldd	r23, Y+22	; 0x16
    1688:	8f 89       	ldd	r24, Y+23	; 0x17
    168a:	98 8d       	ldd	r25, Y+24	; 0x18
    168c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	9c 8b       	std	Y+20, r25	; 0x14
    1696:	8b 8b       	std	Y+19, r24	; 0x13
    1698:	8b 89       	ldd	r24, Y+19	; 0x13
    169a:	9c 89       	ldd	r25, Y+20	; 0x14
    169c:	98 8b       	std	Y+16, r25	; 0x10
    169e:	8f 87       	std	Y+15, r24	; 0x0f
    16a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    16a2:	98 89       	ldd	r25, Y+16	; 0x10
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	f1 f7       	brne	.-4      	; 0x16a4 <main+0x9d2>
    16a8:	98 8b       	std	Y+16, r25	; 0x10
    16aa:	8f 87       	std	Y+15, r24	; 0x0f
    		    				      		    	  _delay_ms(500);
    		    				      		   	     LCD_clearScreen();
    16ac:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <LCD_clearScreen>
    		    				      		   	count++;
    16b0:	80 91 38 01 	lds	r24, 0x0138
    16b4:	90 91 39 01 	lds	r25, 0x0139
    16b8:	01 96       	adiw	r24, 0x01	; 1
    16ba:	90 93 39 01 	sts	0x0139, r25
    16be:	80 93 38 01 	sts	0x0138, r24
    16c2:	1c c0       	rjmp	.+56     	; 0x16fc <main+0xa2a>
    		    			    	    	}
    		    		}

    		    	else{

    		    		key[i++]=bot;
    16c4:	20 91 36 01 	lds	r18, 0x0136
    16c8:	30 91 37 01 	lds	r19, 0x0137
    16cc:	80 91 34 01 	lds	r24, 0x0134
    16d0:	90 91 35 01 	lds	r25, 0x0135
    16d4:	48 2f       	mov	r20, r24
    16d6:	ce 01       	movw	r24, r28
    16d8:	8f 58       	subi	r24, 0x8F	; 143
    16da:	9f 4f       	sbci	r25, 0xFF	; 255
    16dc:	fc 01       	movw	r30, r24
    16de:	e2 0f       	add	r30, r18
    16e0:	f3 1f       	adc	r31, r19
    16e2:	40 83       	st	Z, r20
    16e4:	c9 01       	movw	r24, r18
    16e6:	01 96       	adiw	r24, 0x01	; 1
    16e8:	90 93 37 01 	sts	0x0137, r25
    16ec:	80 93 36 01 	sts	0x0136, r24
    		    		LCD_intgerToString(bot);
    16f0:	80 91 34 01 	lds	r24, 0x0134
    16f4:	90 91 35 01 	lds	r25, 0x0135
    16f8:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <LCD_intgerToString>
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	aa ef       	ldi	r26, 0xFA	; 250
    1702:	b3 e4       	ldi	r27, 0x43	; 67
    1704:	8b 87       	std	Y+11, r24	; 0x0b
    1706:	9c 87       	std	Y+12, r25	; 0x0c
    1708:	ad 87       	std	Y+13, r26	; 0x0d
    170a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    170c:	6b 85       	ldd	r22, Y+11	; 0x0b
    170e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1710:	8d 85       	ldd	r24, Y+13	; 0x0d
    1712:	9e 85       	ldd	r25, Y+14	; 0x0e
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	4a e7       	ldi	r20, 0x7A	; 122
    171a:	53 e4       	ldi	r21, 0x43	; 67
    171c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	8f 83       	std	Y+7, r24	; 0x07
    1726:	98 87       	std	Y+8, r25	; 0x08
    1728:	a9 87       	std	Y+9, r26	; 0x09
    172a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    172c:	6f 81       	ldd	r22, Y+7	; 0x07
    172e:	78 85       	ldd	r23, Y+8	; 0x08
    1730:	89 85       	ldd	r24, Y+9	; 0x09
    1732:	9a 85       	ldd	r25, Y+10	; 0x0a
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	40 e8       	ldi	r20, 0x80	; 128
    173a:	5f e3       	ldi	r21, 0x3F	; 63
    173c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1740:	88 23       	and	r24, r24
    1742:	2c f4       	brge	.+10     	; 0x174e <main+0xa7c>
		__ticks = 1;
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	9e 83       	std	Y+6, r25	; 0x06
    174a:	8d 83       	std	Y+5, r24	; 0x05
    174c:	3f c0       	rjmp	.+126    	; 0x17cc <main+0xafa>
	else if (__tmp > 65535)
    174e:	6f 81       	ldd	r22, Y+7	; 0x07
    1750:	78 85       	ldd	r23, Y+8	; 0x08
    1752:	89 85       	ldd	r24, Y+9	; 0x09
    1754:	9a 85       	ldd	r25, Y+10	; 0x0a
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	3f ef       	ldi	r19, 0xFF	; 255
    175a:	4f e7       	ldi	r20, 0x7F	; 127
    175c:	57 e4       	ldi	r21, 0x47	; 71
    175e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1762:	18 16       	cp	r1, r24
    1764:	4c f5       	brge	.+82     	; 0x17b8 <main+0xae6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1766:	6b 85       	ldd	r22, Y+11	; 0x0b
    1768:	7c 85       	ldd	r23, Y+12	; 0x0c
    176a:	8d 85       	ldd	r24, Y+13	; 0x0d
    176c:	9e 85       	ldd	r25, Y+14	; 0x0e
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	40 e2       	ldi	r20, 0x20	; 32
    1774:	51 e4       	ldi	r21, 0x41	; 65
    1776:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	bc 01       	movw	r22, r24
    1780:	cd 01       	movw	r24, r26
    1782:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	9e 83       	std	Y+6, r25	; 0x06
    178c:	8d 83       	std	Y+5, r24	; 0x05
    178e:	0f c0       	rjmp	.+30     	; 0x17ae <main+0xadc>
    1790:	89 e1       	ldi	r24, 0x19	; 25
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	9c 83       	std	Y+4, r25	; 0x04
    1796:	8b 83       	std	Y+3, r24	; 0x03
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	9c 81       	ldd	r25, Y+4	; 0x04
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	f1 f7       	brne	.-4      	; 0x179c <main+0xaca>
    17a0:	9c 83       	std	Y+4, r25	; 0x04
    17a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a4:	8d 81       	ldd	r24, Y+5	; 0x05
    17a6:	9e 81       	ldd	r25, Y+6	; 0x06
    17a8:	01 97       	sbiw	r24, 0x01	; 1
    17aa:	9e 83       	std	Y+6, r25	; 0x06
    17ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ae:	8d 81       	ldd	r24, Y+5	; 0x05
    17b0:	9e 81       	ldd	r25, Y+6	; 0x06
    17b2:	00 97       	sbiw	r24, 0x00	; 0
    17b4:	69 f7       	brne	.-38     	; 0x1790 <main+0xabe>
    17b6:	7b cb       	rjmp	.-2314   	; 0xeae <main+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b8:	6f 81       	ldd	r22, Y+7	; 0x07
    17ba:	78 85       	ldd	r23, Y+8	; 0x08
    17bc:	89 85       	ldd	r24, Y+9	; 0x09
    17be:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c4:	dc 01       	movw	r26, r24
    17c6:	cb 01       	movw	r24, r22
    17c8:	9e 83       	std	Y+6, r25	; 0x06
    17ca:	8d 83       	std	Y+5, r24	; 0x05
    17cc:	8d 81       	ldd	r24, Y+5	; 0x05
    17ce:	9e 81       	ldd	r25, Y+6	; 0x06
    17d0:	9a 83       	std	Y+2, r25	; 0x02
    17d2:	89 83       	std	Y+1, r24	; 0x01
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	9a 81       	ldd	r25, Y+2	; 0x02
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	f1 f7       	brne	.-4      	; 0x17d8 <main+0xb06>
    17dc:	9a 83       	std	Y+2, r25	; 0x02
    17de:	89 83       	std	Y+1, r24	; 0x01
    17e0:	66 cb       	rjmp	.-2356   	; 0xeae <main+0x1dc>

000017e2 <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	00 d0       	rcall	.+0      	; 0x17e8 <KeyPad_getPressedKey+0x6>
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    17ec:	1a 82       	std	Y+2, r1	; 0x02
    17ee:	4d c0       	rjmp	.+154    	; 0x188a <KeyPad_getPressedKey+0xa8>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    17f0:	ea e3       	ldi	r30, 0x3A	; 58
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	28 2f       	mov	r18, r24
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	80 e1       	ldi	r24, 0x10	; 16
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <KeyPad_getPressedKey+0x22>
    1800:	88 0f       	add	r24, r24
    1802:	99 1f       	adc	r25, r25
    1804:	2a 95       	dec	r18
    1806:	e2 f7       	brpl	.-8      	; 0x1800 <KeyPad_getPressedKey+0x1e>
    1808:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
    180a:	eb e3       	ldi	r30, 0x3B	; 59
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	80 e1       	ldi	r24, 0x10	; 16
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	02 2e       	mov	r0, r18
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <KeyPad_getPressedKey+0x3e>
    181c:	88 0f       	add	r24, r24
    181e:	99 1f       	adc	r25, r25
    1820:	0a 94       	dec	r0
    1822:	e2 f7       	brpl	.-8      	; 0x181c <KeyPad_getPressedKey+0x3a>
    1824:	80 95       	com	r24
    1826:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
    1828:	19 82       	std	Y+1, r1	; 0x01
    182a:	29 c0       	rjmp	.+82     	; 0x187e <KeyPad_getPressedKey+0x9c>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    182c:	e9 e3       	ldi	r30, 0x39	; 57
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	88 2f       	mov	r24, r24
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	a9 01       	movw	r20, r18
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <KeyPad_getPressedKey+0x62>
    1840:	55 95       	asr	r21
    1842:	47 95       	ror	r20
    1844:	8a 95       	dec	r24
    1846:	e2 f7       	brpl	.-8      	; 0x1840 <KeyPad_getPressedKey+0x5e>
    1848:	ca 01       	movw	r24, r20
    184a:	81 70       	andi	r24, 0x01	; 1
    184c:	90 70       	andi	r25, 0x00	; 0
    184e:	00 97       	sbiw	r24, 0x00	; 0
    1850:	99 f4       	brne	.+38     	; 0x1878 <KeyPad_getPressedKey+0x96>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	c9 01       	movw	r24, r18
    185a:	88 0f       	add	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	82 0f       	add	r24, r18
    1860:	93 1f       	adc	r25, r19
    1862:	98 2f       	mov	r25, r24
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	89 0f       	add	r24, r25
    1868:	8f 5f       	subi	r24, 0xFF	; 255
    186a:	0e 94 4a 0c 	call	0x1894	; 0x1894 <KeyPad_4x3_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	cf 91       	pop	r28
    1874:	df 91       	pop	r29
    1876:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
    1878:	89 81       	ldd	r24, Y+1	; 0x01
    187a:	8f 5f       	subi	r24, 0xFF	; 255
    187c:	89 83       	std	Y+1, r24	; 0x01
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	84 30       	cpi	r24, 0x04	; 4
    1882:	a0 f2       	brcs	.-88     	; 0x182c <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	8f 5f       	subi	r24, 0xFF	; 255
    1888:	8a 83       	std	Y+2, r24	; 0x02
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	83 30       	cpi	r24, 0x03	; 3
    188e:	08 f4       	brcc	.+2      	; 0x1892 <KeyPad_getPressedKey+0xb0>
    1890:	af cf       	rjmp	.-162    	; 0x17f0 <KeyPad_getPressedKey+0xe>
    1892:	ac cf       	rjmp	.-168    	; 0x17ec <KeyPad_getPressedKey+0xa>

00001894 <KeyPad_4x3_adjustKeyNumber>:
}

#if (N_col == 3) 

static uint8 KeyPad_4x3_adjustKeyNumber(uint8 button_number)
{
    1894:	df 93       	push	r29
    1896:	cf 93       	push	r28
    1898:	00 d0       	rcall	.+0      	; 0x189a <KeyPad_4x3_adjustKeyNumber+0x6>
    189a:	00 d0       	rcall	.+0      	; 0x189c <KeyPad_4x3_adjustKeyNumber+0x8>
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
    18a0:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	3c 83       	std	Y+4, r19	; 0x04
    18aa:	2b 83       	std	Y+3, r18	; 0x03
    18ac:	8b 81       	ldd	r24, Y+3	; 0x03
    18ae:	9c 81       	ldd	r25, Y+4	; 0x04
    18b0:	86 30       	cpi	r24, 0x06	; 6
    18b2:	91 05       	cpc	r25, r1
    18b4:	09 f4       	brne	.+2      	; 0x18b8 <KeyPad_4x3_adjustKeyNumber+0x24>
    18b6:	5a c0       	rjmp	.+180    	; 0x196c <KeyPad_4x3_adjustKeyNumber+0xd8>
    18b8:	2b 81       	ldd	r18, Y+3	; 0x03
    18ba:	3c 81       	ldd	r19, Y+4	; 0x04
    18bc:	27 30       	cpi	r18, 0x07	; 7
    18be:	31 05       	cpc	r19, r1
    18c0:	0c f5       	brge	.+66     	; 0x1904 <KeyPad_4x3_adjustKeyNumber+0x70>
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	9c 81       	ldd	r25, Y+4	; 0x04
    18c6:	83 30       	cpi	r24, 0x03	; 3
    18c8:	91 05       	cpc	r25, r1
    18ca:	09 f4       	brne	.+2      	; 0x18ce <KeyPad_4x3_adjustKeyNumber+0x3a>
    18cc:	46 c0       	rjmp	.+140    	; 0x195a <KeyPad_4x3_adjustKeyNumber+0xc6>
    18ce:	2b 81       	ldd	r18, Y+3	; 0x03
    18d0:	3c 81       	ldd	r19, Y+4	; 0x04
    18d2:	24 30       	cpi	r18, 0x04	; 4
    18d4:	31 05       	cpc	r19, r1
    18d6:	5c f4       	brge	.+22     	; 0x18ee <KeyPad_4x3_adjustKeyNumber+0x5a>
    18d8:	8b 81       	ldd	r24, Y+3	; 0x03
    18da:	9c 81       	ldd	r25, Y+4	; 0x04
    18dc:	81 30       	cpi	r24, 0x01	; 1
    18de:	91 05       	cpc	r25, r1
    18e0:	b1 f1       	breq	.+108    	; 0x194e <KeyPad_4x3_adjustKeyNumber+0xba>
    18e2:	2b 81       	ldd	r18, Y+3	; 0x03
    18e4:	3c 81       	ldd	r19, Y+4	; 0x04
    18e6:	22 30       	cpi	r18, 0x02	; 2
    18e8:	31 05       	cpc	r19, r1
    18ea:	a1 f1       	breq	.+104    	; 0x1954 <KeyPad_4x3_adjustKeyNumber+0xc0>
    18ec:	55 c0       	rjmp	.+170    	; 0x1998 <KeyPad_4x3_adjustKeyNumber+0x104>
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	9c 81       	ldd	r25, Y+4	; 0x04
    18f2:	84 30       	cpi	r24, 0x04	; 4
    18f4:	91 05       	cpc	r25, r1
    18f6:	a1 f1       	breq	.+104    	; 0x1960 <KeyPad_4x3_adjustKeyNumber+0xcc>
    18f8:	2b 81       	ldd	r18, Y+3	; 0x03
    18fa:	3c 81       	ldd	r19, Y+4	; 0x04
    18fc:	25 30       	cpi	r18, 0x05	; 5
    18fe:	31 05       	cpc	r19, r1
    1900:	91 f1       	breq	.+100    	; 0x1966 <KeyPad_4x3_adjustKeyNumber+0xd2>
    1902:	4a c0       	rjmp	.+148    	; 0x1998 <KeyPad_4x3_adjustKeyNumber+0x104>
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	9c 81       	ldd	r25, Y+4	; 0x04
    1908:	89 30       	cpi	r24, 0x09	; 9
    190a:	91 05       	cpc	r25, r1
    190c:	c1 f1       	breq	.+112    	; 0x197e <KeyPad_4x3_adjustKeyNumber+0xea>
    190e:	2b 81       	ldd	r18, Y+3	; 0x03
    1910:	3c 81       	ldd	r19, Y+4	; 0x04
    1912:	2a 30       	cpi	r18, 0x0A	; 10
    1914:	31 05       	cpc	r19, r1
    1916:	5c f4       	brge	.+22     	; 0x192e <KeyPad_4x3_adjustKeyNumber+0x9a>
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	9c 81       	ldd	r25, Y+4	; 0x04
    191c:	87 30       	cpi	r24, 0x07	; 7
    191e:	91 05       	cpc	r25, r1
    1920:	41 f1       	breq	.+80     	; 0x1972 <KeyPad_4x3_adjustKeyNumber+0xde>
    1922:	2b 81       	ldd	r18, Y+3	; 0x03
    1924:	3c 81       	ldd	r19, Y+4	; 0x04
    1926:	28 30       	cpi	r18, 0x08	; 8
    1928:	31 05       	cpc	r19, r1
    192a:	31 f1       	breq	.+76     	; 0x1978 <KeyPad_4x3_adjustKeyNumber+0xe4>
    192c:	35 c0       	rjmp	.+106    	; 0x1998 <KeyPad_4x3_adjustKeyNumber+0x104>
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	9c 81       	ldd	r25, Y+4	; 0x04
    1932:	8b 30       	cpi	r24, 0x0B	; 11
    1934:	91 05       	cpc	r25, r1
    1936:	59 f1       	breq	.+86     	; 0x198e <KeyPad_4x3_adjustKeyNumber+0xfa>
    1938:	2b 81       	ldd	r18, Y+3	; 0x03
    193a:	3c 81       	ldd	r19, Y+4	; 0x04
    193c:	2b 30       	cpi	r18, 0x0B	; 11
    193e:	31 05       	cpc	r19, r1
    1940:	0c f1       	brlt	.+66     	; 0x1984 <KeyPad_4x3_adjustKeyNumber+0xf0>
    1942:	8b 81       	ldd	r24, Y+3	; 0x03
    1944:	9c 81       	ldd	r25, Y+4	; 0x04
    1946:	8c 30       	cpi	r24, 0x0C	; 12
    1948:	91 05       	cpc	r25, r1
    194a:	19 f1       	breq	.+70     	; 0x1992 <KeyPad_4x3_adjustKeyNumber+0xfe>
    194c:	25 c0       	rjmp	.+74     	; 0x1998 <KeyPad_4x3_adjustKeyNumber+0x104>
	{
		case 1:
			return 1;
    194e:	91 e0       	ldi	r25, 0x01	; 1
    1950:	9a 83       	std	Y+2, r25	; 0x02
    1952:	24 c0       	rjmp	.+72     	; 0x199c <KeyPad_4x3_adjustKeyNumber+0x108>
				 break;
		case 2: return 2;
    1954:	22 e0       	ldi	r18, 0x02	; 2
    1956:	2a 83       	std	Y+2, r18	; 0x02
    1958:	21 c0       	rjmp	.+66     	; 0x199c <KeyPad_4x3_adjustKeyNumber+0x108>
				 break;		
		case 3: return 3;
    195a:	33 e0       	ldi	r19, 0x03	; 3
    195c:	3a 83       	std	Y+2, r19	; 0x02
    195e:	1e c0       	rjmp	.+60     	; 0x199c <KeyPad_4x3_adjustKeyNumber+0x108>
				 break;
		case 4: return 4;
    1960:	84 e0       	ldi	r24, 0x04	; 4
    1962:	8a 83       	std	Y+2, r24	; 0x02
    1964:	1b c0       	rjmp	.+54     	; 0x199c <KeyPad_4x3_adjustKeyNumber+0x108>
				break;
		case 5: return 5;
    1966:	95 e0       	ldi	r25, 0x05	; 5
    1968:	9a 83       	std	Y+2, r25	; 0x02
    196a:	18 c0       	rjmp	.+48     	; 0x199c <KeyPad_4x3_adjustKeyNumber+0x108>
				break;
		case 6: return 6;
    196c:	26 e0       	ldi	r18, 0x06	; 6
    196e:	2a 83       	std	Y+2, r18	; 0x02
    1970:	15 c0       	rjmp	.+42     	; 0x199c <KeyPad_4x3_adjustKeyNumber+0x108>
				break;
		case 7: return 7;
    1972:	37 e0       	ldi	r19, 0x07	; 7
    1974:	3a 83       	std	Y+2, r19	; 0x02
    1976:	12 c0       	rjmp	.+36     	; 0x199c <KeyPad_4x3_adjustKeyNumber+0x108>
				break;
		case 8: return 8;
    1978:	88 e0       	ldi	r24, 0x08	; 8
    197a:	8a 83       	std	Y+2, r24	; 0x02
    197c:	0f c0       	rjmp	.+30     	; 0x199c <KeyPad_4x3_adjustKeyNumber+0x108>
				break;
		case 9: return 9;
    197e:	99 e0       	ldi	r25, 0x09	; 9
    1980:	9a 83       	std	Y+2, r25	; 0x02
    1982:	0c c0       	rjmp	.+24     	; 0x199c <KeyPad_4x3_adjustKeyNumber+0x108>
				break;
		case 10:LCD_clearScreen();
    1984:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <LCD_clearScreen>
		return 10; /*clear*/
    1988:	2a e0       	ldi	r18, 0x0A	; 10
    198a:	2a 83       	std	Y+2, r18	; 0x02
    198c:	07 c0       	rjmp	.+14     	; 0x199c <KeyPad_4x3_adjustKeyNumber+0x108>

				break;
		case 11: return 0;
    198e:	1a 82       	std	Y+2, r1	; 0x02
    1990:	05 c0       	rjmp	.+10     	; 0x199c <KeyPad_4x3_adjustKeyNumber+0x108>
				break;
		case 12:
			return 12;
    1992:	3c e0       	ldi	r19, 0x0C	; 12
    1994:	3a 83       	std	Y+2, r19	; 0x02
    1996:	02 c0       	rjmp	.+4      	; 0x199c <KeyPad_4x3_adjustKeyNumber+0x108>
		        break;
		default: return button_number;								 						
    1998:	89 81       	ldd	r24, Y+1	; 0x01
    199a:	8a 83       	std	Y+2, r24	; 0x02
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	cf 91       	pop	r28
    19a8:	df 91       	pop	r29
    19aa:	08 95       	ret

000019ac <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    19ac:	df 93       	push	r29
    19ae:	cf 93       	push	r28
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    19b4:	a7 e3       	ldi	r26, 0x37	; 55
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	e7 e3       	ldi	r30, 0x37	; 55
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	8e 60       	ori	r24, 0x0E	; 14
    19c0:	8c 93       	st	X, r24
	
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
    19c2:	a4 e3       	ldi	r26, 0x34	; 52
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	e4 e3       	ldi	r30, 0x34	; 52
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	8f 60       	ori	r24, 0x0F	; 15
    19ce:	8c 93       	st	X, r24
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    19d0:	82 e0       	ldi	r24, 0x02	; 2
    19d2:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    19d6:	88 e2       	ldi	r24, 0x28	; 40
    19d8:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    19dc:	8c e0       	ldi	r24, 0x0C	; 12
    19de:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <LCD_sendCommand>
}
    19e8:	cf 91       	pop	r28
    19ea:	df 91       	pop	r29
    19ec:	08 95       	ret

000019ee <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    19ee:	0f 93       	push	r16
    19f0:	1f 93       	push	r17
    19f2:	df 93       	push	r29
    19f4:	cf 93       	push	r28
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
    19fa:	c3 56       	subi	r28, 0x63	; 99
    19fc:	d0 40       	sbci	r29, 0x00	; 0
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	f8 94       	cli
    1a02:	de bf       	out	0x3e, r29	; 62
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	cd bf       	out	0x3d, r28	; 61
    1a08:	fe 01       	movw	r30, r28
    1a0a:	ed 59       	subi	r30, 0x9D	; 157
    1a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0e:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1a10:	a8 e3       	ldi	r26, 0x38	; 56
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	e8 e3       	ldi	r30, 0x38	; 56
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	8d 7f       	andi	r24, 0xFD	; 253
    1a1c:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1a1e:	a8 e3       	ldi	r26, 0x38	; 56
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	e8 e3       	ldi	r30, 0x38	; 56
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	8b 7f       	andi	r24, 0xFB	; 251
    1a2a:	8c 93       	st	X, r24
    1a2c:	fe 01       	movw	r30, r28
    1a2e:	e1 5a       	subi	r30, 0xA1	; 161
    1a30:	ff 4f       	sbci	r31, 0xFF	; 255
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	a0 e8       	ldi	r26, 0x80	; 128
    1a38:	bf e3       	ldi	r27, 0x3F	; 63
    1a3a:	80 83       	st	Z, r24
    1a3c:	91 83       	std	Z+1, r25	; 0x01
    1a3e:	a2 83       	std	Z+2, r26	; 0x02
    1a40:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a42:	8e 01       	movw	r16, r28
    1a44:	05 5a       	subi	r16, 0xA5	; 165
    1a46:	1f 4f       	sbci	r17, 0xFF	; 255
    1a48:	fe 01       	movw	r30, r28
    1a4a:	e1 5a       	subi	r30, 0xA1	; 161
    1a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4e:	60 81       	ld	r22, Z
    1a50:	71 81       	ldd	r23, Z+1	; 0x01
    1a52:	82 81       	ldd	r24, Z+2	; 0x02
    1a54:	93 81       	ldd	r25, Z+3	; 0x03
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	4a e7       	ldi	r20, 0x7A	; 122
    1a5c:	53 e4       	ldi	r21, 0x43	; 67
    1a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	f8 01       	movw	r30, r16
    1a68:	80 83       	st	Z, r24
    1a6a:	91 83       	std	Z+1, r25	; 0x01
    1a6c:	a2 83       	std	Z+2, r26	; 0x02
    1a6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a70:	fe 01       	movw	r30, r28
    1a72:	e5 5a       	subi	r30, 0xA5	; 165
    1a74:	ff 4f       	sbci	r31, 0xFF	; 255
    1a76:	60 81       	ld	r22, Z
    1a78:	71 81       	ldd	r23, Z+1	; 0x01
    1a7a:	82 81       	ldd	r24, Z+2	; 0x02
    1a7c:	93 81       	ldd	r25, Z+3	; 0x03
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	40 e8       	ldi	r20, 0x80	; 128
    1a84:	5f e3       	ldi	r21, 0x3F	; 63
    1a86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a8a:	88 23       	and	r24, r24
    1a8c:	44 f4       	brge	.+16     	; 0x1a9e <LCD_sendCommand+0xb0>
		__ticks = 1;
    1a8e:	fe 01       	movw	r30, r28
    1a90:	e7 5a       	subi	r30, 0xA7	; 167
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	91 83       	std	Z+1, r25	; 0x01
    1a9a:	80 83       	st	Z, r24
    1a9c:	64 c0       	rjmp	.+200    	; 0x1b66 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    1a9e:	fe 01       	movw	r30, r28
    1aa0:	e5 5a       	subi	r30, 0xA5	; 165
    1aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa4:	60 81       	ld	r22, Z
    1aa6:	71 81       	ldd	r23, Z+1	; 0x01
    1aa8:	82 81       	ldd	r24, Z+2	; 0x02
    1aaa:	93 81       	ldd	r25, Z+3	; 0x03
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	3f ef       	ldi	r19, 0xFF	; 255
    1ab0:	4f e7       	ldi	r20, 0x7F	; 127
    1ab2:	57 e4       	ldi	r21, 0x47	; 71
    1ab4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ab8:	18 16       	cp	r1, r24
    1aba:	0c f0       	brlt	.+2      	; 0x1abe <LCD_sendCommand+0xd0>
    1abc:	43 c0       	rjmp	.+134    	; 0x1b44 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1abe:	fe 01       	movw	r30, r28
    1ac0:	e1 5a       	subi	r30, 0xA1	; 161
    1ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac4:	60 81       	ld	r22, Z
    1ac6:	71 81       	ldd	r23, Z+1	; 0x01
    1ac8:	82 81       	ldd	r24, Z+2	; 0x02
    1aca:	93 81       	ldd	r25, Z+3	; 0x03
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	40 e2       	ldi	r20, 0x20	; 32
    1ad2:	51 e4       	ldi	r21, 0x41	; 65
    1ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	8e 01       	movw	r16, r28
    1ade:	07 5a       	subi	r16, 0xA7	; 167
    1ae0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae2:	bc 01       	movw	r22, r24
    1ae4:	cd 01       	movw	r24, r26
    1ae6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	f8 01       	movw	r30, r16
    1af0:	91 83       	std	Z+1, r25	; 0x01
    1af2:	80 83       	st	Z, r24
    1af4:	1f c0       	rjmp	.+62     	; 0x1b34 <LCD_sendCommand+0x146>
    1af6:	fe 01       	movw	r30, r28
    1af8:	e9 5a       	subi	r30, 0xA9	; 169
    1afa:	ff 4f       	sbci	r31, 0xFF	; 255
    1afc:	89 e1       	ldi	r24, 0x19	; 25
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	91 83       	std	Z+1, r25	; 0x01
    1b02:	80 83       	st	Z, r24
    1b04:	fe 01       	movw	r30, r28
    1b06:	e9 5a       	subi	r30, 0xA9	; 169
    1b08:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0a:	80 81       	ld	r24, Z
    1b0c:	91 81       	ldd	r25, Z+1	; 0x01
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	f1 f7       	brne	.-4      	; 0x1b0e <LCD_sendCommand+0x120>
    1b12:	fe 01       	movw	r30, r28
    1b14:	e9 5a       	subi	r30, 0xA9	; 169
    1b16:	ff 4f       	sbci	r31, 0xFF	; 255
    1b18:	91 83       	std	Z+1, r25	; 0x01
    1b1a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b1c:	de 01       	movw	r26, r28
    1b1e:	a7 5a       	subi	r26, 0xA7	; 167
    1b20:	bf 4f       	sbci	r27, 0xFF	; 255
    1b22:	fe 01       	movw	r30, r28
    1b24:	e7 5a       	subi	r30, 0xA7	; 167
    1b26:	ff 4f       	sbci	r31, 0xFF	; 255
    1b28:	80 81       	ld	r24, Z
    1b2a:	91 81       	ldd	r25, Z+1	; 0x01
    1b2c:	01 97       	sbiw	r24, 0x01	; 1
    1b2e:	11 96       	adiw	r26, 0x01	; 1
    1b30:	9c 93       	st	X, r25
    1b32:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b34:	fe 01       	movw	r30, r28
    1b36:	e7 5a       	subi	r30, 0xA7	; 167
    1b38:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3a:	80 81       	ld	r24, Z
    1b3c:	91 81       	ldd	r25, Z+1	; 0x01
    1b3e:	00 97       	sbiw	r24, 0x00	; 0
    1b40:	d1 f6       	brne	.-76     	; 0x1af6 <LCD_sendCommand+0x108>
    1b42:	27 c0       	rjmp	.+78     	; 0x1b92 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b44:	8e 01       	movw	r16, r28
    1b46:	07 5a       	subi	r16, 0xA7	; 167
    1b48:	1f 4f       	sbci	r17, 0xFF	; 255
    1b4a:	fe 01       	movw	r30, r28
    1b4c:	e5 5a       	subi	r30, 0xA5	; 165
    1b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b50:	60 81       	ld	r22, Z
    1b52:	71 81       	ldd	r23, Z+1	; 0x01
    1b54:	82 81       	ldd	r24, Z+2	; 0x02
    1b56:	93 81       	ldd	r25, Z+3	; 0x03
    1b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	f8 01       	movw	r30, r16
    1b62:	91 83       	std	Z+1, r25	; 0x01
    1b64:	80 83       	st	Z, r24
    1b66:	de 01       	movw	r26, r28
    1b68:	ab 5a       	subi	r26, 0xAB	; 171
    1b6a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	e7 5a       	subi	r30, 0xA7	; 167
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	80 81       	ld	r24, Z
    1b74:	91 81       	ldd	r25, Z+1	; 0x01
    1b76:	8d 93       	st	X+, r24
    1b78:	9c 93       	st	X, r25
    1b7a:	fe 01       	movw	r30, r28
    1b7c:	eb 5a       	subi	r30, 0xAB	; 171
    1b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b80:	80 81       	ld	r24, Z
    1b82:	91 81       	ldd	r25, Z+1	; 0x01
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	f1 f7       	brne	.-4      	; 0x1b84 <LCD_sendCommand+0x196>
    1b88:	fe 01       	movw	r30, r28
    1b8a:	eb 5a       	subi	r30, 0xAB	; 171
    1b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8e:	91 83       	std	Z+1, r25	; 0x01
    1b90:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1b92:	a8 e3       	ldi	r26, 0x38	; 56
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	e8 e3       	ldi	r30, 0x38	; 56
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	88 60       	ori	r24, 0x08	; 8
    1b9e:	8c 93       	st	X, r24
    1ba0:	fe 01       	movw	r30, r28
    1ba2:	ef 5a       	subi	r30, 0xAF	; 175
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	a0 e8       	ldi	r26, 0x80	; 128
    1bac:	bf e3       	ldi	r27, 0x3F	; 63
    1bae:	80 83       	st	Z, r24
    1bb0:	91 83       	std	Z+1, r25	; 0x01
    1bb2:	a2 83       	std	Z+2, r26	; 0x02
    1bb4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb6:	8e 01       	movw	r16, r28
    1bb8:	03 5b       	subi	r16, 0xB3	; 179
    1bba:	1f 4f       	sbci	r17, 0xFF	; 255
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	ef 5a       	subi	r30, 0xAF	; 175
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	60 81       	ld	r22, Z
    1bc4:	71 81       	ldd	r23, Z+1	; 0x01
    1bc6:	82 81       	ldd	r24, Z+2	; 0x02
    1bc8:	93 81       	ldd	r25, Z+3	; 0x03
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	4a e7       	ldi	r20, 0x7A	; 122
    1bd0:	53 e4       	ldi	r21, 0x43	; 67
    1bd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	f8 01       	movw	r30, r16
    1bdc:	80 83       	st	Z, r24
    1bde:	91 83       	std	Z+1, r25	; 0x01
    1be0:	a2 83       	std	Z+2, r26	; 0x02
    1be2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1be4:	fe 01       	movw	r30, r28
    1be6:	e3 5b       	subi	r30, 0xB3	; 179
    1be8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bea:	60 81       	ld	r22, Z
    1bec:	71 81       	ldd	r23, Z+1	; 0x01
    1bee:	82 81       	ldd	r24, Z+2	; 0x02
    1bf0:	93 81       	ldd	r25, Z+3	; 0x03
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	40 e8       	ldi	r20, 0x80	; 128
    1bf8:	5f e3       	ldi	r21, 0x3F	; 63
    1bfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bfe:	88 23       	and	r24, r24
    1c00:	44 f4       	brge	.+16     	; 0x1c12 <LCD_sendCommand+0x224>
		__ticks = 1;
    1c02:	fe 01       	movw	r30, r28
    1c04:	e5 5b       	subi	r30, 0xB5	; 181
    1c06:	ff 4f       	sbci	r31, 0xFF	; 255
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	91 83       	std	Z+1, r25	; 0x01
    1c0e:	80 83       	st	Z, r24
    1c10:	64 c0       	rjmp	.+200    	; 0x1cda <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    1c12:	fe 01       	movw	r30, r28
    1c14:	e3 5b       	subi	r30, 0xB3	; 179
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	60 81       	ld	r22, Z
    1c1a:	71 81       	ldd	r23, Z+1	; 0x01
    1c1c:	82 81       	ldd	r24, Z+2	; 0x02
    1c1e:	93 81       	ldd	r25, Z+3	; 0x03
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	3f ef       	ldi	r19, 0xFF	; 255
    1c24:	4f e7       	ldi	r20, 0x7F	; 127
    1c26:	57 e4       	ldi	r21, 0x47	; 71
    1c28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c2c:	18 16       	cp	r1, r24
    1c2e:	0c f0       	brlt	.+2      	; 0x1c32 <LCD_sendCommand+0x244>
    1c30:	43 c0       	rjmp	.+134    	; 0x1cb8 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c32:	fe 01       	movw	r30, r28
    1c34:	ef 5a       	subi	r30, 0xAF	; 175
    1c36:	ff 4f       	sbci	r31, 0xFF	; 255
    1c38:	60 81       	ld	r22, Z
    1c3a:	71 81       	ldd	r23, Z+1	; 0x01
    1c3c:	82 81       	ldd	r24, Z+2	; 0x02
    1c3e:	93 81       	ldd	r25, Z+3	; 0x03
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	40 e2       	ldi	r20, 0x20	; 32
    1c46:	51 e4       	ldi	r21, 0x41	; 65
    1c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	8e 01       	movw	r16, r28
    1c52:	05 5b       	subi	r16, 0xB5	; 181
    1c54:	1f 4f       	sbci	r17, 0xFF	; 255
    1c56:	bc 01       	movw	r22, r24
    1c58:	cd 01       	movw	r24, r26
    1c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	f8 01       	movw	r30, r16
    1c64:	91 83       	std	Z+1, r25	; 0x01
    1c66:	80 83       	st	Z, r24
    1c68:	1f c0       	rjmp	.+62     	; 0x1ca8 <LCD_sendCommand+0x2ba>
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	e7 5b       	subi	r30, 0xB7	; 183
    1c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c70:	89 e1       	ldi	r24, 0x19	; 25
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	91 83       	std	Z+1, r25	; 0x01
    1c76:	80 83       	st	Z, r24
    1c78:	fe 01       	movw	r30, r28
    1c7a:	e7 5b       	subi	r30, 0xB7	; 183
    1c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7e:	80 81       	ld	r24, Z
    1c80:	91 81       	ldd	r25, Z+1	; 0x01
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	f1 f7       	brne	.-4      	; 0x1c82 <LCD_sendCommand+0x294>
    1c86:	fe 01       	movw	r30, r28
    1c88:	e7 5b       	subi	r30, 0xB7	; 183
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	91 83       	std	Z+1, r25	; 0x01
    1c8e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c90:	de 01       	movw	r26, r28
    1c92:	a5 5b       	subi	r26, 0xB5	; 181
    1c94:	bf 4f       	sbci	r27, 0xFF	; 255
    1c96:	fe 01       	movw	r30, r28
    1c98:	e5 5b       	subi	r30, 0xB5	; 181
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	80 81       	ld	r24, Z
    1c9e:	91 81       	ldd	r25, Z+1	; 0x01
    1ca0:	01 97       	sbiw	r24, 0x01	; 1
    1ca2:	11 96       	adiw	r26, 0x01	; 1
    1ca4:	9c 93       	st	X, r25
    1ca6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca8:	fe 01       	movw	r30, r28
    1caa:	e5 5b       	subi	r30, 0xB5	; 181
    1cac:	ff 4f       	sbci	r31, 0xFF	; 255
    1cae:	80 81       	ld	r24, Z
    1cb0:	91 81       	ldd	r25, Z+1	; 0x01
    1cb2:	00 97       	sbiw	r24, 0x00	; 0
    1cb4:	d1 f6       	brne	.-76     	; 0x1c6a <LCD_sendCommand+0x27c>
    1cb6:	27 c0       	rjmp	.+78     	; 0x1d06 <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb8:	8e 01       	movw	r16, r28
    1cba:	05 5b       	subi	r16, 0xB5	; 181
    1cbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	e3 5b       	subi	r30, 0xB3	; 179
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	60 81       	ld	r22, Z
    1cc6:	71 81       	ldd	r23, Z+1	; 0x01
    1cc8:	82 81       	ldd	r24, Z+2	; 0x02
    1cca:	93 81       	ldd	r25, Z+3	; 0x03
    1ccc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	f8 01       	movw	r30, r16
    1cd6:	91 83       	std	Z+1, r25	; 0x01
    1cd8:	80 83       	st	Z, r24
    1cda:	de 01       	movw	r26, r28
    1cdc:	a9 5b       	subi	r26, 0xB9	; 185
    1cde:	bf 4f       	sbci	r27, 0xFF	; 255
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	e5 5b       	subi	r30, 0xB5	; 181
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	80 81       	ld	r24, Z
    1ce8:	91 81       	ldd	r25, Z+1	; 0x01
    1cea:	8d 93       	st	X+, r24
    1cec:	9c 93       	st	X, r25
    1cee:	fe 01       	movw	r30, r28
    1cf0:	e9 5b       	subi	r30, 0xB9	; 185
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	80 81       	ld	r24, Z
    1cf6:	91 81       	ldd	r25, Z+1	; 0x01
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	f1 f7       	brne	.-4      	; 0x1cf8 <LCD_sendCommand+0x30a>
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	e9 5b       	subi	r30, 0xB9	; 185
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
    1d02:	91 83       	std	Z+1, r25	; 0x01
    1d04:	80 83       	st	Z, r24
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
    1d06:	a5 e3       	ldi	r26, 0x35	; 53
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	e5 e3       	ldi	r30, 0x35	; 53
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	98 2f       	mov	r25, r24
    1d12:	90 7f       	andi	r25, 0xF0	; 240
    1d14:	fe 01       	movw	r30, r28
    1d16:	ed 59       	subi	r30, 0x9D	; 157
    1d18:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1a:	80 81       	ld	r24, Z
    1d1c:	82 95       	swap	r24
    1d1e:	8f 70       	andi	r24, 0x0F	; 15
    1d20:	89 2b       	or	r24, r25
    1d22:	8c 93       	st	X, r24
    1d24:	fe 01       	movw	r30, r28
    1d26:	ed 5b       	subi	r30, 0xBD	; 189
    1d28:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	a0 e8       	ldi	r26, 0x80	; 128
    1d30:	bf e3       	ldi	r27, 0x3F	; 63
    1d32:	80 83       	st	Z, r24
    1d34:	91 83       	std	Z+1, r25	; 0x01
    1d36:	a2 83       	std	Z+2, r26	; 0x02
    1d38:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d3a:	8e 01       	movw	r16, r28
    1d3c:	01 5c       	subi	r16, 0xC1	; 193
    1d3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d40:	fe 01       	movw	r30, r28
    1d42:	ed 5b       	subi	r30, 0xBD	; 189
    1d44:	ff 4f       	sbci	r31, 0xFF	; 255
    1d46:	60 81       	ld	r22, Z
    1d48:	71 81       	ldd	r23, Z+1	; 0x01
    1d4a:	82 81       	ldd	r24, Z+2	; 0x02
    1d4c:	93 81       	ldd	r25, Z+3	; 0x03
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	4a e7       	ldi	r20, 0x7A	; 122
    1d54:	53 e4       	ldi	r21, 0x43	; 67
    1d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	f8 01       	movw	r30, r16
    1d60:	80 83       	st	Z, r24
    1d62:	91 83       	std	Z+1, r25	; 0x01
    1d64:	a2 83       	std	Z+2, r26	; 0x02
    1d66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d68:	fe 01       	movw	r30, r28
    1d6a:	ff 96       	adiw	r30, 0x3f	; 63
    1d6c:	60 81       	ld	r22, Z
    1d6e:	71 81       	ldd	r23, Z+1	; 0x01
    1d70:	82 81       	ldd	r24, Z+2	; 0x02
    1d72:	93 81       	ldd	r25, Z+3	; 0x03
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	40 e8       	ldi	r20, 0x80	; 128
    1d7a:	5f e3       	ldi	r21, 0x3F	; 63
    1d7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d80:	88 23       	and	r24, r24
    1d82:	2c f4       	brge	.+10     	; 0x1d8e <LCD_sendCommand+0x3a0>
		__ticks = 1;
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	9e af       	std	Y+62, r25	; 0x3e
    1d8a:	8d af       	std	Y+61, r24	; 0x3d
    1d8c:	46 c0       	rjmp	.+140    	; 0x1e1a <LCD_sendCommand+0x42c>
	else if (__tmp > 65535)
    1d8e:	fe 01       	movw	r30, r28
    1d90:	ff 96       	adiw	r30, 0x3f	; 63
    1d92:	60 81       	ld	r22, Z
    1d94:	71 81       	ldd	r23, Z+1	; 0x01
    1d96:	82 81       	ldd	r24, Z+2	; 0x02
    1d98:	93 81       	ldd	r25, Z+3	; 0x03
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	3f ef       	ldi	r19, 0xFF	; 255
    1d9e:	4f e7       	ldi	r20, 0x7F	; 127
    1da0:	57 e4       	ldi	r21, 0x47	; 71
    1da2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1da6:	18 16       	cp	r1, r24
    1da8:	64 f5       	brge	.+88     	; 0x1e02 <LCD_sendCommand+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1daa:	fe 01       	movw	r30, r28
    1dac:	ed 5b       	subi	r30, 0xBD	; 189
    1dae:	ff 4f       	sbci	r31, 0xFF	; 255
    1db0:	60 81       	ld	r22, Z
    1db2:	71 81       	ldd	r23, Z+1	; 0x01
    1db4:	82 81       	ldd	r24, Z+2	; 0x02
    1db6:	93 81       	ldd	r25, Z+3	; 0x03
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	40 e2       	ldi	r20, 0x20	; 32
    1dbe:	51 e4       	ldi	r21, 0x41	; 65
    1dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	bc 01       	movw	r22, r24
    1dca:	cd 01       	movw	r24, r26
    1dcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	9e af       	std	Y+62, r25	; 0x3e
    1dd6:	8d af       	std	Y+61, r24	; 0x3d
    1dd8:	0f c0       	rjmp	.+30     	; 0x1df8 <LCD_sendCommand+0x40a>
    1dda:	89 e1       	ldi	r24, 0x19	; 25
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	9c af       	std	Y+60, r25	; 0x3c
    1de0:	8b af       	std	Y+59, r24	; 0x3b
    1de2:	8b ad       	ldd	r24, Y+59	; 0x3b
    1de4:	9c ad       	ldd	r25, Y+60	; 0x3c
    1de6:	01 97       	sbiw	r24, 0x01	; 1
    1de8:	f1 f7       	brne	.-4      	; 0x1de6 <LCD_sendCommand+0x3f8>
    1dea:	9c af       	std	Y+60, r25	; 0x3c
    1dec:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dee:	8d ad       	ldd	r24, Y+61	; 0x3d
    1df0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1df2:	01 97       	sbiw	r24, 0x01	; 1
    1df4:	9e af       	std	Y+62, r25	; 0x3e
    1df6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1dfa:	9e ad       	ldd	r25, Y+62	; 0x3e
    1dfc:	00 97       	sbiw	r24, 0x00	; 0
    1dfe:	69 f7       	brne	.-38     	; 0x1dda <LCD_sendCommand+0x3ec>
    1e00:	16 c0       	rjmp	.+44     	; 0x1e2e <LCD_sendCommand+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e02:	fe 01       	movw	r30, r28
    1e04:	ff 96       	adiw	r30, 0x3f	; 63
    1e06:	60 81       	ld	r22, Z
    1e08:	71 81       	ldd	r23, Z+1	; 0x01
    1e0a:	82 81       	ldd	r24, Z+2	; 0x02
    1e0c:	93 81       	ldd	r25, Z+3	; 0x03
    1e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	9e af       	std	Y+62, r25	; 0x3e
    1e18:	8d af       	std	Y+61, r24	; 0x3d
    1e1a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e1c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e1e:	9a af       	std	Y+58, r25	; 0x3a
    1e20:	89 af       	std	Y+57, r24	; 0x39
    1e22:	89 ad       	ldd	r24, Y+57	; 0x39
    1e24:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	f1 f7       	brne	.-4      	; 0x1e26 <LCD_sendCommand+0x438>
    1e2a:	9a af       	std	Y+58, r25	; 0x3a
    1e2c:	89 af       	std	Y+57, r24	; 0x39
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1e2e:	a8 e3       	ldi	r26, 0x38	; 56
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	e8 e3       	ldi	r30, 0x38	; 56
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	87 7f       	andi	r24, 0xF7	; 247
    1e3a:	8c 93       	st	X, r24
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	a0 e8       	ldi	r26, 0x80	; 128
    1e42:	bf e3       	ldi	r27, 0x3F	; 63
    1e44:	8d ab       	std	Y+53, r24	; 0x35
    1e46:	9e ab       	std	Y+54, r25	; 0x36
    1e48:	af ab       	std	Y+55, r26	; 0x37
    1e4a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e4c:	6d a9       	ldd	r22, Y+53	; 0x35
    1e4e:	7e a9       	ldd	r23, Y+54	; 0x36
    1e50:	8f a9       	ldd	r24, Y+55	; 0x37
    1e52:	98 ad       	ldd	r25, Y+56	; 0x38
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	4a e7       	ldi	r20, 0x7A	; 122
    1e5a:	53 e4       	ldi	r21, 0x43	; 67
    1e5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	89 ab       	std	Y+49, r24	; 0x31
    1e66:	9a ab       	std	Y+50, r25	; 0x32
    1e68:	ab ab       	std	Y+51, r26	; 0x33
    1e6a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e6c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e6e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e70:	8b a9       	ldd	r24, Y+51	; 0x33
    1e72:	9c a9       	ldd	r25, Y+52	; 0x34
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	40 e8       	ldi	r20, 0x80	; 128
    1e7a:	5f e3       	ldi	r21, 0x3F	; 63
    1e7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e80:	88 23       	and	r24, r24
    1e82:	2c f4       	brge	.+10     	; 0x1e8e <LCD_sendCommand+0x4a0>
		__ticks = 1;
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	98 ab       	std	Y+48, r25	; 0x30
    1e8a:	8f a7       	std	Y+47, r24	; 0x2f
    1e8c:	3f c0       	rjmp	.+126    	; 0x1f0c <LCD_sendCommand+0x51e>
	else if (__tmp > 65535)
    1e8e:	69 a9       	ldd	r22, Y+49	; 0x31
    1e90:	7a a9       	ldd	r23, Y+50	; 0x32
    1e92:	8b a9       	ldd	r24, Y+51	; 0x33
    1e94:	9c a9       	ldd	r25, Y+52	; 0x34
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	3f ef       	ldi	r19, 0xFF	; 255
    1e9a:	4f e7       	ldi	r20, 0x7F	; 127
    1e9c:	57 e4       	ldi	r21, 0x47	; 71
    1e9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ea2:	18 16       	cp	r1, r24
    1ea4:	4c f5       	brge	.+82     	; 0x1ef8 <LCD_sendCommand+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea6:	6d a9       	ldd	r22, Y+53	; 0x35
    1ea8:	7e a9       	ldd	r23, Y+54	; 0x36
    1eaa:	8f a9       	ldd	r24, Y+55	; 0x37
    1eac:	98 ad       	ldd	r25, Y+56	; 0x38
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	40 e2       	ldi	r20, 0x20	; 32
    1eb4:	51 e4       	ldi	r21, 0x41	; 65
    1eb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	bc 01       	movw	r22, r24
    1ec0:	cd 01       	movw	r24, r26
    1ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	98 ab       	std	Y+48, r25	; 0x30
    1ecc:	8f a7       	std	Y+47, r24	; 0x2f
    1ece:	0f c0       	rjmp	.+30     	; 0x1eee <LCD_sendCommand+0x500>
    1ed0:	89 e1       	ldi	r24, 0x19	; 25
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	9e a7       	std	Y+46, r25	; 0x2e
    1ed6:	8d a7       	std	Y+45, r24	; 0x2d
    1ed8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1eda:	9e a5       	ldd	r25, Y+46	; 0x2e
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	f1 f7       	brne	.-4      	; 0x1edc <LCD_sendCommand+0x4ee>
    1ee0:	9e a7       	std	Y+46, r25	; 0x2e
    1ee2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ee6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	98 ab       	std	Y+48, r25	; 0x30
    1eec:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eee:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ef0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ef2:	00 97       	sbiw	r24, 0x00	; 0
    1ef4:	69 f7       	brne	.-38     	; 0x1ed0 <LCD_sendCommand+0x4e2>
    1ef6:	14 c0       	rjmp	.+40     	; 0x1f20 <LCD_sendCommand+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef8:	69 a9       	ldd	r22, Y+49	; 0x31
    1efa:	7a a9       	ldd	r23, Y+50	; 0x32
    1efc:	8b a9       	ldd	r24, Y+51	; 0x33
    1efe:	9c a9       	ldd	r25, Y+52	; 0x34
    1f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	98 ab       	std	Y+48, r25	; 0x30
    1f0a:	8f a7       	std	Y+47, r24	; 0x2f
    1f0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f0e:	98 a9       	ldd	r25, Y+48	; 0x30
    1f10:	9c a7       	std	Y+44, r25	; 0x2c
    1f12:	8b a7       	std	Y+43, r24	; 0x2b
    1f14:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f16:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	f1 f7       	brne	.-4      	; 0x1f18 <LCD_sendCommand+0x52a>
    1f1c:	9c a7       	std	Y+44, r25	; 0x2c
    1f1e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1f20:	a8 e3       	ldi	r26, 0x38	; 56
    1f22:	b0 e0       	ldi	r27, 0x00	; 0
    1f24:	e8 e3       	ldi	r30, 0x38	; 56
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	88 60       	ori	r24, 0x08	; 8
    1f2c:	8c 93       	st	X, r24
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	a0 e8       	ldi	r26, 0x80	; 128
    1f34:	bf e3       	ldi	r27, 0x3F	; 63
    1f36:	8f a3       	std	Y+39, r24	; 0x27
    1f38:	98 a7       	std	Y+40, r25	; 0x28
    1f3a:	a9 a7       	std	Y+41, r26	; 0x29
    1f3c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f3e:	6f a1       	ldd	r22, Y+39	; 0x27
    1f40:	78 a5       	ldd	r23, Y+40	; 0x28
    1f42:	89 a5       	ldd	r24, Y+41	; 0x29
    1f44:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	4a e7       	ldi	r20, 0x7A	; 122
    1f4c:	53 e4       	ldi	r21, 0x43	; 67
    1f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	8b a3       	std	Y+35, r24	; 0x23
    1f58:	9c a3       	std	Y+36, r25	; 0x24
    1f5a:	ad a3       	std	Y+37, r26	; 0x25
    1f5c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f5e:	6b a1       	ldd	r22, Y+35	; 0x23
    1f60:	7c a1       	ldd	r23, Y+36	; 0x24
    1f62:	8d a1       	ldd	r24, Y+37	; 0x25
    1f64:	9e a1       	ldd	r25, Y+38	; 0x26
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	40 e8       	ldi	r20, 0x80	; 128
    1f6c:	5f e3       	ldi	r21, 0x3F	; 63
    1f6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f72:	88 23       	and	r24, r24
    1f74:	2c f4       	brge	.+10     	; 0x1f80 <LCD_sendCommand+0x592>
		__ticks = 1;
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	9a a3       	std	Y+34, r25	; 0x22
    1f7c:	89 a3       	std	Y+33, r24	; 0x21
    1f7e:	3f c0       	rjmp	.+126    	; 0x1ffe <LCD_sendCommand+0x610>
	else if (__tmp > 65535)
    1f80:	6b a1       	ldd	r22, Y+35	; 0x23
    1f82:	7c a1       	ldd	r23, Y+36	; 0x24
    1f84:	8d a1       	ldd	r24, Y+37	; 0x25
    1f86:	9e a1       	ldd	r25, Y+38	; 0x26
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	3f ef       	ldi	r19, 0xFF	; 255
    1f8c:	4f e7       	ldi	r20, 0x7F	; 127
    1f8e:	57 e4       	ldi	r21, 0x47	; 71
    1f90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f94:	18 16       	cp	r1, r24
    1f96:	4c f5       	brge	.+82     	; 0x1fea <LCD_sendCommand+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f98:	6f a1       	ldd	r22, Y+39	; 0x27
    1f9a:	78 a5       	ldd	r23, Y+40	; 0x28
    1f9c:	89 a5       	ldd	r24, Y+41	; 0x29
    1f9e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	40 e2       	ldi	r20, 0x20	; 32
    1fa6:	51 e4       	ldi	r21, 0x41	; 65
    1fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	bc 01       	movw	r22, r24
    1fb2:	cd 01       	movw	r24, r26
    1fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	9a a3       	std	Y+34, r25	; 0x22
    1fbe:	89 a3       	std	Y+33, r24	; 0x21
    1fc0:	0f c0       	rjmp	.+30     	; 0x1fe0 <LCD_sendCommand+0x5f2>
    1fc2:	89 e1       	ldi	r24, 0x19	; 25
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	98 a3       	std	Y+32, r25	; 0x20
    1fc8:	8f 8f       	std	Y+31, r24	; 0x1f
    1fca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fcc:	98 a1       	ldd	r25, Y+32	; 0x20
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	f1 f7       	brne	.-4      	; 0x1fce <LCD_sendCommand+0x5e0>
    1fd2:	98 a3       	std	Y+32, r25	; 0x20
    1fd4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd6:	89 a1       	ldd	r24, Y+33	; 0x21
    1fd8:	9a a1       	ldd	r25, Y+34	; 0x22
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	9a a3       	std	Y+34, r25	; 0x22
    1fde:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe0:	89 a1       	ldd	r24, Y+33	; 0x21
    1fe2:	9a a1       	ldd	r25, Y+34	; 0x22
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	69 f7       	brne	.-38     	; 0x1fc2 <LCD_sendCommand+0x5d4>
    1fe8:	14 c0       	rjmp	.+40     	; 0x2012 <LCD_sendCommand+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fea:	6b a1       	ldd	r22, Y+35	; 0x23
    1fec:	7c a1       	ldd	r23, Y+36	; 0x24
    1fee:	8d a1       	ldd	r24, Y+37	; 0x25
    1ff0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	9a a3       	std	Y+34, r25	; 0x22
    1ffc:	89 a3       	std	Y+33, r24	; 0x21
    1ffe:	89 a1       	ldd	r24, Y+33	; 0x21
    2000:	9a a1       	ldd	r25, Y+34	; 0x22
    2002:	9e 8f       	std	Y+30, r25	; 0x1e
    2004:	8d 8f       	std	Y+29, r24	; 0x1d
    2006:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2008:	9e 8d       	ldd	r25, Y+30	; 0x1e
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	f1 f7       	brne	.-4      	; 0x200a <LCD_sendCommand+0x61c>
    200e:	9e 8f       	std	Y+30, r25	; 0x1e
    2010:	8d 8f       	std	Y+29, r24	; 0x1d

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
    2012:	a5 e3       	ldi	r26, 0x35	; 53
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	e5 e3       	ldi	r30, 0x35	; 53
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	98 2f       	mov	r25, r24
    201e:	90 7f       	andi	r25, 0xF0	; 240
    2020:	fe 01       	movw	r30, r28
    2022:	ed 59       	subi	r30, 0x9D	; 157
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	80 81       	ld	r24, Z
    2028:	8f 70       	andi	r24, 0x0F	; 15
    202a:	89 2b       	or	r24, r25
    202c:	8c 93       	st	X, r24
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	a0 e8       	ldi	r26, 0x80	; 128
    2034:	bf e3       	ldi	r27, 0x3F	; 63
    2036:	89 8f       	std	Y+25, r24	; 0x19
    2038:	9a 8f       	std	Y+26, r25	; 0x1a
    203a:	ab 8f       	std	Y+27, r26	; 0x1b
    203c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    203e:	69 8d       	ldd	r22, Y+25	; 0x19
    2040:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2042:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2044:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	4a e7       	ldi	r20, 0x7A	; 122
    204c:	53 e4       	ldi	r21, 0x43	; 67
    204e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	8d 8b       	std	Y+21, r24	; 0x15
    2058:	9e 8b       	std	Y+22, r25	; 0x16
    205a:	af 8b       	std	Y+23, r26	; 0x17
    205c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    205e:	6d 89       	ldd	r22, Y+21	; 0x15
    2060:	7e 89       	ldd	r23, Y+22	; 0x16
    2062:	8f 89       	ldd	r24, Y+23	; 0x17
    2064:	98 8d       	ldd	r25, Y+24	; 0x18
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	40 e8       	ldi	r20, 0x80	; 128
    206c:	5f e3       	ldi	r21, 0x3F	; 63
    206e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2072:	88 23       	and	r24, r24
    2074:	2c f4       	brge	.+10     	; 0x2080 <LCD_sendCommand+0x692>
		__ticks = 1;
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	9c 8b       	std	Y+20, r25	; 0x14
    207c:	8b 8b       	std	Y+19, r24	; 0x13
    207e:	3f c0       	rjmp	.+126    	; 0x20fe <LCD_sendCommand+0x710>
	else if (__tmp > 65535)
    2080:	6d 89       	ldd	r22, Y+21	; 0x15
    2082:	7e 89       	ldd	r23, Y+22	; 0x16
    2084:	8f 89       	ldd	r24, Y+23	; 0x17
    2086:	98 8d       	ldd	r25, Y+24	; 0x18
    2088:	20 e0       	ldi	r18, 0x00	; 0
    208a:	3f ef       	ldi	r19, 0xFF	; 255
    208c:	4f e7       	ldi	r20, 0x7F	; 127
    208e:	57 e4       	ldi	r21, 0x47	; 71
    2090:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2094:	18 16       	cp	r1, r24
    2096:	4c f5       	brge	.+82     	; 0x20ea <LCD_sendCommand+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2098:	69 8d       	ldd	r22, Y+25	; 0x19
    209a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    209c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    209e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	40 e2       	ldi	r20, 0x20	; 32
    20a6:	51 e4       	ldi	r21, 0x41	; 65
    20a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	bc 01       	movw	r22, r24
    20b2:	cd 01       	movw	r24, r26
    20b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	9c 8b       	std	Y+20, r25	; 0x14
    20be:	8b 8b       	std	Y+19, r24	; 0x13
    20c0:	0f c0       	rjmp	.+30     	; 0x20e0 <LCD_sendCommand+0x6f2>
    20c2:	89 e1       	ldi	r24, 0x19	; 25
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	9a 8b       	std	Y+18, r25	; 0x12
    20c8:	89 8b       	std	Y+17, r24	; 0x11
    20ca:	89 89       	ldd	r24, Y+17	; 0x11
    20cc:	9a 89       	ldd	r25, Y+18	; 0x12
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	f1 f7       	brne	.-4      	; 0x20ce <LCD_sendCommand+0x6e0>
    20d2:	9a 8b       	std	Y+18, r25	; 0x12
    20d4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d6:	8b 89       	ldd	r24, Y+19	; 0x13
    20d8:	9c 89       	ldd	r25, Y+20	; 0x14
    20da:	01 97       	sbiw	r24, 0x01	; 1
    20dc:	9c 8b       	std	Y+20, r25	; 0x14
    20de:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e0:	8b 89       	ldd	r24, Y+19	; 0x13
    20e2:	9c 89       	ldd	r25, Y+20	; 0x14
    20e4:	00 97       	sbiw	r24, 0x00	; 0
    20e6:	69 f7       	brne	.-38     	; 0x20c2 <LCD_sendCommand+0x6d4>
    20e8:	14 c0       	rjmp	.+40     	; 0x2112 <LCD_sendCommand+0x724>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ea:	6d 89       	ldd	r22, Y+21	; 0x15
    20ec:	7e 89       	ldd	r23, Y+22	; 0x16
    20ee:	8f 89       	ldd	r24, Y+23	; 0x17
    20f0:	98 8d       	ldd	r25, Y+24	; 0x18
    20f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	9c 8b       	std	Y+20, r25	; 0x14
    20fc:	8b 8b       	std	Y+19, r24	; 0x13
    20fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2100:	9c 89       	ldd	r25, Y+20	; 0x14
    2102:	98 8b       	std	Y+16, r25	; 0x10
    2104:	8f 87       	std	Y+15, r24	; 0x0f
    2106:	8f 85       	ldd	r24, Y+15	; 0x0f
    2108:	98 89       	ldd	r25, Y+16	; 0x10
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	f1 f7       	brne	.-4      	; 0x210a <LCD_sendCommand+0x71c>
    210e:	98 8b       	std	Y+16, r25	; 0x10
    2110:	8f 87       	std	Y+15, r24	; 0x0f
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2112:	a8 e3       	ldi	r26, 0x38	; 56
    2114:	b0 e0       	ldi	r27, 0x00	; 0
    2116:	e8 e3       	ldi	r30, 0x38	; 56
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	80 81       	ld	r24, Z
    211c:	87 7f       	andi	r24, 0xF7	; 247
    211e:	8c 93       	st	X, r24
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	a0 e8       	ldi	r26, 0x80	; 128
    2126:	bf e3       	ldi	r27, 0x3F	; 63
    2128:	8b 87       	std	Y+11, r24	; 0x0b
    212a:	9c 87       	std	Y+12, r25	; 0x0c
    212c:	ad 87       	std	Y+13, r26	; 0x0d
    212e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2130:	6b 85       	ldd	r22, Y+11	; 0x0b
    2132:	7c 85       	ldd	r23, Y+12	; 0x0c
    2134:	8d 85       	ldd	r24, Y+13	; 0x0d
    2136:	9e 85       	ldd	r25, Y+14	; 0x0e
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	4a e7       	ldi	r20, 0x7A	; 122
    213e:	53 e4       	ldi	r21, 0x43	; 67
    2140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	8f 83       	std	Y+7, r24	; 0x07
    214a:	98 87       	std	Y+8, r25	; 0x08
    214c:	a9 87       	std	Y+9, r26	; 0x09
    214e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2150:	6f 81       	ldd	r22, Y+7	; 0x07
    2152:	78 85       	ldd	r23, Y+8	; 0x08
    2154:	89 85       	ldd	r24, Y+9	; 0x09
    2156:	9a 85       	ldd	r25, Y+10	; 0x0a
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	40 e8       	ldi	r20, 0x80	; 128
    215e:	5f e3       	ldi	r21, 0x3F	; 63
    2160:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2164:	88 23       	and	r24, r24
    2166:	2c f4       	brge	.+10     	; 0x2172 <LCD_sendCommand+0x784>
		__ticks = 1;
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	9e 83       	std	Y+6, r25	; 0x06
    216e:	8d 83       	std	Y+5, r24	; 0x05
    2170:	3f c0       	rjmp	.+126    	; 0x21f0 <LCD_sendCommand+0x802>
	else if (__tmp > 65535)
    2172:	6f 81       	ldd	r22, Y+7	; 0x07
    2174:	78 85       	ldd	r23, Y+8	; 0x08
    2176:	89 85       	ldd	r24, Y+9	; 0x09
    2178:	9a 85       	ldd	r25, Y+10	; 0x0a
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	3f ef       	ldi	r19, 0xFF	; 255
    217e:	4f e7       	ldi	r20, 0x7F	; 127
    2180:	57 e4       	ldi	r21, 0x47	; 71
    2182:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2186:	18 16       	cp	r1, r24
    2188:	4c f5       	brge	.+82     	; 0x21dc <LCD_sendCommand+0x7ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    218a:	6b 85       	ldd	r22, Y+11	; 0x0b
    218c:	7c 85       	ldd	r23, Y+12	; 0x0c
    218e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2190:	9e 85       	ldd	r25, Y+14	; 0x0e
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	40 e2       	ldi	r20, 0x20	; 32
    2198:	51 e4       	ldi	r21, 0x41	; 65
    219a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	bc 01       	movw	r22, r24
    21a4:	cd 01       	movw	r24, r26
    21a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	9e 83       	std	Y+6, r25	; 0x06
    21b0:	8d 83       	std	Y+5, r24	; 0x05
    21b2:	0f c0       	rjmp	.+30     	; 0x21d2 <LCD_sendCommand+0x7e4>
    21b4:	89 e1       	ldi	r24, 0x19	; 25
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	9c 83       	std	Y+4, r25	; 0x04
    21ba:	8b 83       	std	Y+3, r24	; 0x03
    21bc:	8b 81       	ldd	r24, Y+3	; 0x03
    21be:	9c 81       	ldd	r25, Y+4	; 0x04
    21c0:	01 97       	sbiw	r24, 0x01	; 1
    21c2:	f1 f7       	brne	.-4      	; 0x21c0 <LCD_sendCommand+0x7d2>
    21c4:	9c 83       	std	Y+4, r25	; 0x04
    21c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ca:	9e 81       	ldd	r25, Y+6	; 0x06
    21cc:	01 97       	sbiw	r24, 0x01	; 1
    21ce:	9e 83       	std	Y+6, r25	; 0x06
    21d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d2:	8d 81       	ldd	r24, Y+5	; 0x05
    21d4:	9e 81       	ldd	r25, Y+6	; 0x06
    21d6:	00 97       	sbiw	r24, 0x00	; 0
    21d8:	69 f7       	brne	.-38     	; 0x21b4 <LCD_sendCommand+0x7c6>
    21da:	14 c0       	rjmp	.+40     	; 0x2204 <LCD_sendCommand+0x816>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21dc:	6f 81       	ldd	r22, Y+7	; 0x07
    21de:	78 85       	ldd	r23, Y+8	; 0x08
    21e0:	89 85       	ldd	r24, Y+9	; 0x09
    21e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	9e 83       	std	Y+6, r25	; 0x06
    21ee:	8d 83       	std	Y+5, r24	; 0x05
    21f0:	8d 81       	ldd	r24, Y+5	; 0x05
    21f2:	9e 81       	ldd	r25, Y+6	; 0x06
    21f4:	9a 83       	std	Y+2, r25	; 0x02
    21f6:	89 83       	std	Y+1, r24	; 0x01
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
    21fa:	9a 81       	ldd	r25, Y+2	; 0x02
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	f1 f7       	brne	.-4      	; 0x21fc <LCD_sendCommand+0x80e>
    2200:	9a 83       	std	Y+2, r25	; 0x02
    2202:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2204:	cd 59       	subi	r28, 0x9D	; 157
    2206:	df 4f       	sbci	r29, 0xFF	; 255
    2208:	0f b6       	in	r0, 0x3f	; 63
    220a:	f8 94       	cli
    220c:	de bf       	out	0x3e, r29	; 62
    220e:	0f be       	out	0x3f, r0	; 63
    2210:	cd bf       	out	0x3d, r28	; 61
    2212:	cf 91       	pop	r28
    2214:	df 91       	pop	r29
    2216:	1f 91       	pop	r17
    2218:	0f 91       	pop	r16
    221a:	08 95       	ret

0000221c <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    221c:	0f 93       	push	r16
    221e:	1f 93       	push	r17
    2220:	df 93       	push	r29
    2222:	cf 93       	push	r28
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
    2228:	c3 56       	subi	r28, 0x63	; 99
    222a:	d0 40       	sbci	r29, 0x00	; 0
    222c:	0f b6       	in	r0, 0x3f	; 63
    222e:	f8 94       	cli
    2230:	de bf       	out	0x3e, r29	; 62
    2232:	0f be       	out	0x3f, r0	; 63
    2234:	cd bf       	out	0x3d, r28	; 61
    2236:	fe 01       	movw	r30, r28
    2238:	ed 59       	subi	r30, 0x9D	; 157
    223a:	ff 4f       	sbci	r31, 0xFF	; 255
    223c:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    223e:	a8 e3       	ldi	r26, 0x38	; 56
    2240:	b0 e0       	ldi	r27, 0x00	; 0
    2242:	e8 e3       	ldi	r30, 0x38	; 56
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	82 60       	ori	r24, 0x02	; 2
    224a:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    224c:	a8 e3       	ldi	r26, 0x38	; 56
    224e:	b0 e0       	ldi	r27, 0x00	; 0
    2250:	e8 e3       	ldi	r30, 0x38	; 56
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	8b 7f       	andi	r24, 0xFB	; 251
    2258:	8c 93       	st	X, r24
    225a:	fe 01       	movw	r30, r28
    225c:	e1 5a       	subi	r30, 0xA1	; 161
    225e:	ff 4f       	sbci	r31, 0xFF	; 255
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	a0 e8       	ldi	r26, 0x80	; 128
    2266:	bf e3       	ldi	r27, 0x3F	; 63
    2268:	80 83       	st	Z, r24
    226a:	91 83       	std	Z+1, r25	; 0x01
    226c:	a2 83       	std	Z+2, r26	; 0x02
    226e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2270:	8e 01       	movw	r16, r28
    2272:	05 5a       	subi	r16, 0xA5	; 165
    2274:	1f 4f       	sbci	r17, 0xFF	; 255
    2276:	fe 01       	movw	r30, r28
    2278:	e1 5a       	subi	r30, 0xA1	; 161
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	60 81       	ld	r22, Z
    227e:	71 81       	ldd	r23, Z+1	; 0x01
    2280:	82 81       	ldd	r24, Z+2	; 0x02
    2282:	93 81       	ldd	r25, Z+3	; 0x03
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	4a e7       	ldi	r20, 0x7A	; 122
    228a:	53 e4       	ldi	r21, 0x43	; 67
    228c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	f8 01       	movw	r30, r16
    2296:	80 83       	st	Z, r24
    2298:	91 83       	std	Z+1, r25	; 0x01
    229a:	a2 83       	std	Z+2, r26	; 0x02
    229c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    229e:	fe 01       	movw	r30, r28
    22a0:	e5 5a       	subi	r30, 0xA5	; 165
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	60 81       	ld	r22, Z
    22a6:	71 81       	ldd	r23, Z+1	; 0x01
    22a8:	82 81       	ldd	r24, Z+2	; 0x02
    22aa:	93 81       	ldd	r25, Z+3	; 0x03
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	40 e8       	ldi	r20, 0x80	; 128
    22b2:	5f e3       	ldi	r21, 0x3F	; 63
    22b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22b8:	88 23       	and	r24, r24
    22ba:	44 f4       	brge	.+16     	; 0x22cc <LCD_displayCharacter+0xb0>
		__ticks = 1;
    22bc:	fe 01       	movw	r30, r28
    22be:	e7 5a       	subi	r30, 0xA7	; 167
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	91 83       	std	Z+1, r25	; 0x01
    22c8:	80 83       	st	Z, r24
    22ca:	64 c0       	rjmp	.+200    	; 0x2394 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    22cc:	fe 01       	movw	r30, r28
    22ce:	e5 5a       	subi	r30, 0xA5	; 165
    22d0:	ff 4f       	sbci	r31, 0xFF	; 255
    22d2:	60 81       	ld	r22, Z
    22d4:	71 81       	ldd	r23, Z+1	; 0x01
    22d6:	82 81       	ldd	r24, Z+2	; 0x02
    22d8:	93 81       	ldd	r25, Z+3	; 0x03
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	3f ef       	ldi	r19, 0xFF	; 255
    22de:	4f e7       	ldi	r20, 0x7F	; 127
    22e0:	57 e4       	ldi	r21, 0x47	; 71
    22e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22e6:	18 16       	cp	r1, r24
    22e8:	0c f0       	brlt	.+2      	; 0x22ec <LCD_displayCharacter+0xd0>
    22ea:	43 c0       	rjmp	.+134    	; 0x2372 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ec:	fe 01       	movw	r30, r28
    22ee:	e1 5a       	subi	r30, 0xA1	; 161
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	60 81       	ld	r22, Z
    22f4:	71 81       	ldd	r23, Z+1	; 0x01
    22f6:	82 81       	ldd	r24, Z+2	; 0x02
    22f8:	93 81       	ldd	r25, Z+3	; 0x03
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e2       	ldi	r20, 0x20	; 32
    2300:	51 e4       	ldi	r21, 0x41	; 65
    2302:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	8e 01       	movw	r16, r28
    230c:	07 5a       	subi	r16, 0xA7	; 167
    230e:	1f 4f       	sbci	r17, 0xFF	; 255
    2310:	bc 01       	movw	r22, r24
    2312:	cd 01       	movw	r24, r26
    2314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2318:	dc 01       	movw	r26, r24
    231a:	cb 01       	movw	r24, r22
    231c:	f8 01       	movw	r30, r16
    231e:	91 83       	std	Z+1, r25	; 0x01
    2320:	80 83       	st	Z, r24
    2322:	1f c0       	rjmp	.+62     	; 0x2362 <LCD_displayCharacter+0x146>
    2324:	fe 01       	movw	r30, r28
    2326:	e9 5a       	subi	r30, 0xA9	; 169
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	89 e1       	ldi	r24, 0x19	; 25
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	91 83       	std	Z+1, r25	; 0x01
    2330:	80 83       	st	Z, r24
    2332:	fe 01       	movw	r30, r28
    2334:	e9 5a       	subi	r30, 0xA9	; 169
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	80 81       	ld	r24, Z
    233a:	91 81       	ldd	r25, Z+1	; 0x01
    233c:	01 97       	sbiw	r24, 0x01	; 1
    233e:	f1 f7       	brne	.-4      	; 0x233c <LCD_displayCharacter+0x120>
    2340:	fe 01       	movw	r30, r28
    2342:	e9 5a       	subi	r30, 0xA9	; 169
    2344:	ff 4f       	sbci	r31, 0xFF	; 255
    2346:	91 83       	std	Z+1, r25	; 0x01
    2348:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    234a:	de 01       	movw	r26, r28
    234c:	a7 5a       	subi	r26, 0xA7	; 167
    234e:	bf 4f       	sbci	r27, 0xFF	; 255
    2350:	fe 01       	movw	r30, r28
    2352:	e7 5a       	subi	r30, 0xA7	; 167
    2354:	ff 4f       	sbci	r31, 0xFF	; 255
    2356:	80 81       	ld	r24, Z
    2358:	91 81       	ldd	r25, Z+1	; 0x01
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	11 96       	adiw	r26, 0x01	; 1
    235e:	9c 93       	st	X, r25
    2360:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2362:	fe 01       	movw	r30, r28
    2364:	e7 5a       	subi	r30, 0xA7	; 167
    2366:	ff 4f       	sbci	r31, 0xFF	; 255
    2368:	80 81       	ld	r24, Z
    236a:	91 81       	ldd	r25, Z+1	; 0x01
    236c:	00 97       	sbiw	r24, 0x00	; 0
    236e:	d1 f6       	brne	.-76     	; 0x2324 <LCD_displayCharacter+0x108>
    2370:	27 c0       	rjmp	.+78     	; 0x23c0 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2372:	8e 01       	movw	r16, r28
    2374:	07 5a       	subi	r16, 0xA7	; 167
    2376:	1f 4f       	sbci	r17, 0xFF	; 255
    2378:	fe 01       	movw	r30, r28
    237a:	e5 5a       	subi	r30, 0xA5	; 165
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	60 81       	ld	r22, Z
    2380:	71 81       	ldd	r23, Z+1	; 0x01
    2382:	82 81       	ldd	r24, Z+2	; 0x02
    2384:	93 81       	ldd	r25, Z+3	; 0x03
    2386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	f8 01       	movw	r30, r16
    2390:	91 83       	std	Z+1, r25	; 0x01
    2392:	80 83       	st	Z, r24
    2394:	de 01       	movw	r26, r28
    2396:	ab 5a       	subi	r26, 0xAB	; 171
    2398:	bf 4f       	sbci	r27, 0xFF	; 255
    239a:	fe 01       	movw	r30, r28
    239c:	e7 5a       	subi	r30, 0xA7	; 167
    239e:	ff 4f       	sbci	r31, 0xFF	; 255
    23a0:	80 81       	ld	r24, Z
    23a2:	91 81       	ldd	r25, Z+1	; 0x01
    23a4:	8d 93       	st	X+, r24
    23a6:	9c 93       	st	X, r25
    23a8:	fe 01       	movw	r30, r28
    23aa:	eb 5a       	subi	r30, 0xAB	; 171
    23ac:	ff 4f       	sbci	r31, 0xFF	; 255
    23ae:	80 81       	ld	r24, Z
    23b0:	91 81       	ldd	r25, Z+1	; 0x01
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	f1 f7       	brne	.-4      	; 0x23b2 <LCD_displayCharacter+0x196>
    23b6:	fe 01       	movw	r30, r28
    23b8:	eb 5a       	subi	r30, 0xAB	; 171
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	91 83       	std	Z+1, r25	; 0x01
    23be:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    23c0:	a8 e3       	ldi	r26, 0x38	; 56
    23c2:	b0 e0       	ldi	r27, 0x00	; 0
    23c4:	e8 e3       	ldi	r30, 0x38	; 56
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	80 81       	ld	r24, Z
    23ca:	88 60       	ori	r24, 0x08	; 8
    23cc:	8c 93       	st	X, r24
    23ce:	fe 01       	movw	r30, r28
    23d0:	ef 5a       	subi	r30, 0xAF	; 175
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	a0 e8       	ldi	r26, 0x80	; 128
    23da:	bf e3       	ldi	r27, 0x3F	; 63
    23dc:	80 83       	st	Z, r24
    23de:	91 83       	std	Z+1, r25	; 0x01
    23e0:	a2 83       	std	Z+2, r26	; 0x02
    23e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e4:	8e 01       	movw	r16, r28
    23e6:	03 5b       	subi	r16, 0xB3	; 179
    23e8:	1f 4f       	sbci	r17, 0xFF	; 255
    23ea:	fe 01       	movw	r30, r28
    23ec:	ef 5a       	subi	r30, 0xAF	; 175
    23ee:	ff 4f       	sbci	r31, 0xFF	; 255
    23f0:	60 81       	ld	r22, Z
    23f2:	71 81       	ldd	r23, Z+1	; 0x01
    23f4:	82 81       	ldd	r24, Z+2	; 0x02
    23f6:	93 81       	ldd	r25, Z+3	; 0x03
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	4a e7       	ldi	r20, 0x7A	; 122
    23fe:	53 e4       	ldi	r21, 0x43	; 67
    2400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	f8 01       	movw	r30, r16
    240a:	80 83       	st	Z, r24
    240c:	91 83       	std	Z+1, r25	; 0x01
    240e:	a2 83       	std	Z+2, r26	; 0x02
    2410:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2412:	fe 01       	movw	r30, r28
    2414:	e3 5b       	subi	r30, 0xB3	; 179
    2416:	ff 4f       	sbci	r31, 0xFF	; 255
    2418:	60 81       	ld	r22, Z
    241a:	71 81       	ldd	r23, Z+1	; 0x01
    241c:	82 81       	ldd	r24, Z+2	; 0x02
    241e:	93 81       	ldd	r25, Z+3	; 0x03
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	40 e8       	ldi	r20, 0x80	; 128
    2426:	5f e3       	ldi	r21, 0x3F	; 63
    2428:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    242c:	88 23       	and	r24, r24
    242e:	44 f4       	brge	.+16     	; 0x2440 <LCD_displayCharacter+0x224>
		__ticks = 1;
    2430:	fe 01       	movw	r30, r28
    2432:	e5 5b       	subi	r30, 0xB5	; 181
    2434:	ff 4f       	sbci	r31, 0xFF	; 255
    2436:	81 e0       	ldi	r24, 0x01	; 1
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	91 83       	std	Z+1, r25	; 0x01
    243c:	80 83       	st	Z, r24
    243e:	64 c0       	rjmp	.+200    	; 0x2508 <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    2440:	fe 01       	movw	r30, r28
    2442:	e3 5b       	subi	r30, 0xB3	; 179
    2444:	ff 4f       	sbci	r31, 0xFF	; 255
    2446:	60 81       	ld	r22, Z
    2448:	71 81       	ldd	r23, Z+1	; 0x01
    244a:	82 81       	ldd	r24, Z+2	; 0x02
    244c:	93 81       	ldd	r25, Z+3	; 0x03
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	3f ef       	ldi	r19, 0xFF	; 255
    2452:	4f e7       	ldi	r20, 0x7F	; 127
    2454:	57 e4       	ldi	r21, 0x47	; 71
    2456:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    245a:	18 16       	cp	r1, r24
    245c:	0c f0       	brlt	.+2      	; 0x2460 <LCD_displayCharacter+0x244>
    245e:	43 c0       	rjmp	.+134    	; 0x24e6 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2460:	fe 01       	movw	r30, r28
    2462:	ef 5a       	subi	r30, 0xAF	; 175
    2464:	ff 4f       	sbci	r31, 0xFF	; 255
    2466:	60 81       	ld	r22, Z
    2468:	71 81       	ldd	r23, Z+1	; 0x01
    246a:	82 81       	ldd	r24, Z+2	; 0x02
    246c:	93 81       	ldd	r25, Z+3	; 0x03
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e2       	ldi	r20, 0x20	; 32
    2474:	51 e4       	ldi	r21, 0x41	; 65
    2476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	8e 01       	movw	r16, r28
    2480:	05 5b       	subi	r16, 0xB5	; 181
    2482:	1f 4f       	sbci	r17, 0xFF	; 255
    2484:	bc 01       	movw	r22, r24
    2486:	cd 01       	movw	r24, r26
    2488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	f8 01       	movw	r30, r16
    2492:	91 83       	std	Z+1, r25	; 0x01
    2494:	80 83       	st	Z, r24
    2496:	1f c0       	rjmp	.+62     	; 0x24d6 <LCD_displayCharacter+0x2ba>
    2498:	fe 01       	movw	r30, r28
    249a:	e7 5b       	subi	r30, 0xB7	; 183
    249c:	ff 4f       	sbci	r31, 0xFF	; 255
    249e:	89 e1       	ldi	r24, 0x19	; 25
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	91 83       	std	Z+1, r25	; 0x01
    24a4:	80 83       	st	Z, r24
    24a6:	fe 01       	movw	r30, r28
    24a8:	e7 5b       	subi	r30, 0xB7	; 183
    24aa:	ff 4f       	sbci	r31, 0xFF	; 255
    24ac:	80 81       	ld	r24, Z
    24ae:	91 81       	ldd	r25, Z+1	; 0x01
    24b0:	01 97       	sbiw	r24, 0x01	; 1
    24b2:	f1 f7       	brne	.-4      	; 0x24b0 <LCD_displayCharacter+0x294>
    24b4:	fe 01       	movw	r30, r28
    24b6:	e7 5b       	subi	r30, 0xB7	; 183
    24b8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ba:	91 83       	std	Z+1, r25	; 0x01
    24bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24be:	de 01       	movw	r26, r28
    24c0:	a5 5b       	subi	r26, 0xB5	; 181
    24c2:	bf 4f       	sbci	r27, 0xFF	; 255
    24c4:	fe 01       	movw	r30, r28
    24c6:	e5 5b       	subi	r30, 0xB5	; 181
    24c8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ca:	80 81       	ld	r24, Z
    24cc:	91 81       	ldd	r25, Z+1	; 0x01
    24ce:	01 97       	sbiw	r24, 0x01	; 1
    24d0:	11 96       	adiw	r26, 0x01	; 1
    24d2:	9c 93       	st	X, r25
    24d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d6:	fe 01       	movw	r30, r28
    24d8:	e5 5b       	subi	r30, 0xB5	; 181
    24da:	ff 4f       	sbci	r31, 0xFF	; 255
    24dc:	80 81       	ld	r24, Z
    24de:	91 81       	ldd	r25, Z+1	; 0x01
    24e0:	00 97       	sbiw	r24, 0x00	; 0
    24e2:	d1 f6       	brne	.-76     	; 0x2498 <LCD_displayCharacter+0x27c>
    24e4:	27 c0       	rjmp	.+78     	; 0x2534 <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e6:	8e 01       	movw	r16, r28
    24e8:	05 5b       	subi	r16, 0xB5	; 181
    24ea:	1f 4f       	sbci	r17, 0xFF	; 255
    24ec:	fe 01       	movw	r30, r28
    24ee:	e3 5b       	subi	r30, 0xB3	; 179
    24f0:	ff 4f       	sbci	r31, 0xFF	; 255
    24f2:	60 81       	ld	r22, Z
    24f4:	71 81       	ldd	r23, Z+1	; 0x01
    24f6:	82 81       	ldd	r24, Z+2	; 0x02
    24f8:	93 81       	ldd	r25, Z+3	; 0x03
    24fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	f8 01       	movw	r30, r16
    2504:	91 83       	std	Z+1, r25	; 0x01
    2506:	80 83       	st	Z, r24
    2508:	de 01       	movw	r26, r28
    250a:	a9 5b       	subi	r26, 0xB9	; 185
    250c:	bf 4f       	sbci	r27, 0xFF	; 255
    250e:	fe 01       	movw	r30, r28
    2510:	e5 5b       	subi	r30, 0xB5	; 181
    2512:	ff 4f       	sbci	r31, 0xFF	; 255
    2514:	80 81       	ld	r24, Z
    2516:	91 81       	ldd	r25, Z+1	; 0x01
    2518:	8d 93       	st	X+, r24
    251a:	9c 93       	st	X, r25
    251c:	fe 01       	movw	r30, r28
    251e:	e9 5b       	subi	r30, 0xB9	; 185
    2520:	ff 4f       	sbci	r31, 0xFF	; 255
    2522:	80 81       	ld	r24, Z
    2524:	91 81       	ldd	r25, Z+1	; 0x01
    2526:	01 97       	sbiw	r24, 0x01	; 1
    2528:	f1 f7       	brne	.-4      	; 0x2526 <LCD_displayCharacter+0x30a>
    252a:	fe 01       	movw	r30, r28
    252c:	e9 5b       	subi	r30, 0xB9	; 185
    252e:	ff 4f       	sbci	r31, 0xFF	; 255
    2530:	91 83       	std	Z+1, r25	; 0x01
    2532:	80 83       	st	Z, r24
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
    2534:	a5 e3       	ldi	r26, 0x35	; 53
    2536:	b0 e0       	ldi	r27, 0x00	; 0
    2538:	e5 e3       	ldi	r30, 0x35	; 53
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	80 81       	ld	r24, Z
    253e:	98 2f       	mov	r25, r24
    2540:	90 7f       	andi	r25, 0xF0	; 240
    2542:	fe 01       	movw	r30, r28
    2544:	ed 59       	subi	r30, 0x9D	; 157
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
    2548:	80 81       	ld	r24, Z
    254a:	82 95       	swap	r24
    254c:	8f 70       	andi	r24, 0x0F	; 15
    254e:	89 2b       	or	r24, r25
    2550:	8c 93       	st	X, r24
    2552:	fe 01       	movw	r30, r28
    2554:	ed 5b       	subi	r30, 0xBD	; 189
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	a0 e8       	ldi	r26, 0x80	; 128
    255e:	bf e3       	ldi	r27, 0x3F	; 63
    2560:	80 83       	st	Z, r24
    2562:	91 83       	std	Z+1, r25	; 0x01
    2564:	a2 83       	std	Z+2, r26	; 0x02
    2566:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2568:	8e 01       	movw	r16, r28
    256a:	01 5c       	subi	r16, 0xC1	; 193
    256c:	1f 4f       	sbci	r17, 0xFF	; 255
    256e:	fe 01       	movw	r30, r28
    2570:	ed 5b       	subi	r30, 0xBD	; 189
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	60 81       	ld	r22, Z
    2576:	71 81       	ldd	r23, Z+1	; 0x01
    2578:	82 81       	ldd	r24, Z+2	; 0x02
    257a:	93 81       	ldd	r25, Z+3	; 0x03
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	4a e7       	ldi	r20, 0x7A	; 122
    2582:	53 e4       	ldi	r21, 0x43	; 67
    2584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	f8 01       	movw	r30, r16
    258e:	80 83       	st	Z, r24
    2590:	91 83       	std	Z+1, r25	; 0x01
    2592:	a2 83       	std	Z+2, r26	; 0x02
    2594:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2596:	fe 01       	movw	r30, r28
    2598:	ff 96       	adiw	r30, 0x3f	; 63
    259a:	60 81       	ld	r22, Z
    259c:	71 81       	ldd	r23, Z+1	; 0x01
    259e:	82 81       	ldd	r24, Z+2	; 0x02
    25a0:	93 81       	ldd	r25, Z+3	; 0x03
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	40 e8       	ldi	r20, 0x80	; 128
    25a8:	5f e3       	ldi	r21, 0x3F	; 63
    25aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25ae:	88 23       	and	r24, r24
    25b0:	2c f4       	brge	.+10     	; 0x25bc <LCD_displayCharacter+0x3a0>
		__ticks = 1;
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	9e af       	std	Y+62, r25	; 0x3e
    25b8:	8d af       	std	Y+61, r24	; 0x3d
    25ba:	46 c0       	rjmp	.+140    	; 0x2648 <LCD_displayCharacter+0x42c>
	else if (__tmp > 65535)
    25bc:	fe 01       	movw	r30, r28
    25be:	ff 96       	adiw	r30, 0x3f	; 63
    25c0:	60 81       	ld	r22, Z
    25c2:	71 81       	ldd	r23, Z+1	; 0x01
    25c4:	82 81       	ldd	r24, Z+2	; 0x02
    25c6:	93 81       	ldd	r25, Z+3	; 0x03
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	3f ef       	ldi	r19, 0xFF	; 255
    25cc:	4f e7       	ldi	r20, 0x7F	; 127
    25ce:	57 e4       	ldi	r21, 0x47	; 71
    25d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25d4:	18 16       	cp	r1, r24
    25d6:	64 f5       	brge	.+88     	; 0x2630 <LCD_displayCharacter+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d8:	fe 01       	movw	r30, r28
    25da:	ed 5b       	subi	r30, 0xBD	; 189
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	60 81       	ld	r22, Z
    25e0:	71 81       	ldd	r23, Z+1	; 0x01
    25e2:	82 81       	ldd	r24, Z+2	; 0x02
    25e4:	93 81       	ldd	r25, Z+3	; 0x03
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	40 e2       	ldi	r20, 0x20	; 32
    25ec:	51 e4       	ldi	r21, 0x41	; 65
    25ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	bc 01       	movw	r22, r24
    25f8:	cd 01       	movw	r24, r26
    25fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fe:	dc 01       	movw	r26, r24
    2600:	cb 01       	movw	r24, r22
    2602:	9e af       	std	Y+62, r25	; 0x3e
    2604:	8d af       	std	Y+61, r24	; 0x3d
    2606:	0f c0       	rjmp	.+30     	; 0x2626 <LCD_displayCharacter+0x40a>
    2608:	89 e1       	ldi	r24, 0x19	; 25
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	9c af       	std	Y+60, r25	; 0x3c
    260e:	8b af       	std	Y+59, r24	; 0x3b
    2610:	8b ad       	ldd	r24, Y+59	; 0x3b
    2612:	9c ad       	ldd	r25, Y+60	; 0x3c
    2614:	01 97       	sbiw	r24, 0x01	; 1
    2616:	f1 f7       	brne	.-4      	; 0x2614 <LCD_displayCharacter+0x3f8>
    2618:	9c af       	std	Y+60, r25	; 0x3c
    261a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    261c:	8d ad       	ldd	r24, Y+61	; 0x3d
    261e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2620:	01 97       	sbiw	r24, 0x01	; 1
    2622:	9e af       	std	Y+62, r25	; 0x3e
    2624:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2626:	8d ad       	ldd	r24, Y+61	; 0x3d
    2628:	9e ad       	ldd	r25, Y+62	; 0x3e
    262a:	00 97       	sbiw	r24, 0x00	; 0
    262c:	69 f7       	brne	.-38     	; 0x2608 <LCD_displayCharacter+0x3ec>
    262e:	16 c0       	rjmp	.+44     	; 0x265c <LCD_displayCharacter+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2630:	fe 01       	movw	r30, r28
    2632:	ff 96       	adiw	r30, 0x3f	; 63
    2634:	60 81       	ld	r22, Z
    2636:	71 81       	ldd	r23, Z+1	; 0x01
    2638:	82 81       	ldd	r24, Z+2	; 0x02
    263a:	93 81       	ldd	r25, Z+3	; 0x03
    263c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	9e af       	std	Y+62, r25	; 0x3e
    2646:	8d af       	std	Y+61, r24	; 0x3d
    2648:	8d ad       	ldd	r24, Y+61	; 0x3d
    264a:	9e ad       	ldd	r25, Y+62	; 0x3e
    264c:	9a af       	std	Y+58, r25	; 0x3a
    264e:	89 af       	std	Y+57, r24	; 0x39
    2650:	89 ad       	ldd	r24, Y+57	; 0x39
    2652:	9a ad       	ldd	r25, Y+58	; 0x3a
    2654:	01 97       	sbiw	r24, 0x01	; 1
    2656:	f1 f7       	brne	.-4      	; 0x2654 <LCD_displayCharacter+0x438>
    2658:	9a af       	std	Y+58, r25	; 0x3a
    265a:	89 af       	std	Y+57, r24	; 0x39
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    265c:	a8 e3       	ldi	r26, 0x38	; 56
    265e:	b0 e0       	ldi	r27, 0x00	; 0
    2660:	e8 e3       	ldi	r30, 0x38	; 56
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	80 81       	ld	r24, Z
    2666:	87 7f       	andi	r24, 0xF7	; 247
    2668:	8c 93       	st	X, r24
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	a0 e8       	ldi	r26, 0x80	; 128
    2670:	bf e3       	ldi	r27, 0x3F	; 63
    2672:	8d ab       	std	Y+53, r24	; 0x35
    2674:	9e ab       	std	Y+54, r25	; 0x36
    2676:	af ab       	std	Y+55, r26	; 0x37
    2678:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267a:	6d a9       	ldd	r22, Y+53	; 0x35
    267c:	7e a9       	ldd	r23, Y+54	; 0x36
    267e:	8f a9       	ldd	r24, Y+55	; 0x37
    2680:	98 ad       	ldd	r25, Y+56	; 0x38
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	4a e7       	ldi	r20, 0x7A	; 122
    2688:	53 e4       	ldi	r21, 0x43	; 67
    268a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	89 ab       	std	Y+49, r24	; 0x31
    2694:	9a ab       	std	Y+50, r25	; 0x32
    2696:	ab ab       	std	Y+51, r26	; 0x33
    2698:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    269a:	69 a9       	ldd	r22, Y+49	; 0x31
    269c:	7a a9       	ldd	r23, Y+50	; 0x32
    269e:	8b a9       	ldd	r24, Y+51	; 0x33
    26a0:	9c a9       	ldd	r25, Y+52	; 0x34
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	40 e8       	ldi	r20, 0x80	; 128
    26a8:	5f e3       	ldi	r21, 0x3F	; 63
    26aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26ae:	88 23       	and	r24, r24
    26b0:	2c f4       	brge	.+10     	; 0x26bc <LCD_displayCharacter+0x4a0>
		__ticks = 1;
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	98 ab       	std	Y+48, r25	; 0x30
    26b8:	8f a7       	std	Y+47, r24	; 0x2f
    26ba:	3f c0       	rjmp	.+126    	; 0x273a <LCD_displayCharacter+0x51e>
	else if (__tmp > 65535)
    26bc:	69 a9       	ldd	r22, Y+49	; 0x31
    26be:	7a a9       	ldd	r23, Y+50	; 0x32
    26c0:	8b a9       	ldd	r24, Y+51	; 0x33
    26c2:	9c a9       	ldd	r25, Y+52	; 0x34
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	3f ef       	ldi	r19, 0xFF	; 255
    26c8:	4f e7       	ldi	r20, 0x7F	; 127
    26ca:	57 e4       	ldi	r21, 0x47	; 71
    26cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26d0:	18 16       	cp	r1, r24
    26d2:	4c f5       	brge	.+82     	; 0x2726 <LCD_displayCharacter+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d4:	6d a9       	ldd	r22, Y+53	; 0x35
    26d6:	7e a9       	ldd	r23, Y+54	; 0x36
    26d8:	8f a9       	ldd	r24, Y+55	; 0x37
    26da:	98 ad       	ldd	r25, Y+56	; 0x38
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	40 e2       	ldi	r20, 0x20	; 32
    26e2:	51 e4       	ldi	r21, 0x41	; 65
    26e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	bc 01       	movw	r22, r24
    26ee:	cd 01       	movw	r24, r26
    26f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	98 ab       	std	Y+48, r25	; 0x30
    26fa:	8f a7       	std	Y+47, r24	; 0x2f
    26fc:	0f c0       	rjmp	.+30     	; 0x271c <LCD_displayCharacter+0x500>
    26fe:	89 e1       	ldi	r24, 0x19	; 25
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	9e a7       	std	Y+46, r25	; 0x2e
    2704:	8d a7       	std	Y+45, r24	; 0x2d
    2706:	8d a5       	ldd	r24, Y+45	; 0x2d
    2708:	9e a5       	ldd	r25, Y+46	; 0x2e
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	f1 f7       	brne	.-4      	; 0x270a <LCD_displayCharacter+0x4ee>
    270e:	9e a7       	std	Y+46, r25	; 0x2e
    2710:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2712:	8f a5       	ldd	r24, Y+47	; 0x2f
    2714:	98 a9       	ldd	r25, Y+48	; 0x30
    2716:	01 97       	sbiw	r24, 0x01	; 1
    2718:	98 ab       	std	Y+48, r25	; 0x30
    271a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    271c:	8f a5       	ldd	r24, Y+47	; 0x2f
    271e:	98 a9       	ldd	r25, Y+48	; 0x30
    2720:	00 97       	sbiw	r24, 0x00	; 0
    2722:	69 f7       	brne	.-38     	; 0x26fe <LCD_displayCharacter+0x4e2>
    2724:	14 c0       	rjmp	.+40     	; 0x274e <LCD_displayCharacter+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2726:	69 a9       	ldd	r22, Y+49	; 0x31
    2728:	7a a9       	ldd	r23, Y+50	; 0x32
    272a:	8b a9       	ldd	r24, Y+51	; 0x33
    272c:	9c a9       	ldd	r25, Y+52	; 0x34
    272e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	98 ab       	std	Y+48, r25	; 0x30
    2738:	8f a7       	std	Y+47, r24	; 0x2f
    273a:	8f a5       	ldd	r24, Y+47	; 0x2f
    273c:	98 a9       	ldd	r25, Y+48	; 0x30
    273e:	9c a7       	std	Y+44, r25	; 0x2c
    2740:	8b a7       	std	Y+43, r24	; 0x2b
    2742:	8b a5       	ldd	r24, Y+43	; 0x2b
    2744:	9c a5       	ldd	r25, Y+44	; 0x2c
    2746:	01 97       	sbiw	r24, 0x01	; 1
    2748:	f1 f7       	brne	.-4      	; 0x2746 <LCD_displayCharacter+0x52a>
    274a:	9c a7       	std	Y+44, r25	; 0x2c
    274c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    274e:	a8 e3       	ldi	r26, 0x38	; 56
    2750:	b0 e0       	ldi	r27, 0x00	; 0
    2752:	e8 e3       	ldi	r30, 0x38	; 56
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	80 81       	ld	r24, Z
    2758:	88 60       	ori	r24, 0x08	; 8
    275a:	8c 93       	st	X, r24
    275c:	80 e0       	ldi	r24, 0x00	; 0
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	a0 e8       	ldi	r26, 0x80	; 128
    2762:	bf e3       	ldi	r27, 0x3F	; 63
    2764:	8f a3       	std	Y+39, r24	; 0x27
    2766:	98 a7       	std	Y+40, r25	; 0x28
    2768:	a9 a7       	std	Y+41, r26	; 0x29
    276a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    276c:	6f a1       	ldd	r22, Y+39	; 0x27
    276e:	78 a5       	ldd	r23, Y+40	; 0x28
    2770:	89 a5       	ldd	r24, Y+41	; 0x29
    2772:	9a a5       	ldd	r25, Y+42	; 0x2a
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	4a e7       	ldi	r20, 0x7A	; 122
    277a:	53 e4       	ldi	r21, 0x43	; 67
    277c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	8b a3       	std	Y+35, r24	; 0x23
    2786:	9c a3       	std	Y+36, r25	; 0x24
    2788:	ad a3       	std	Y+37, r26	; 0x25
    278a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    278c:	6b a1       	ldd	r22, Y+35	; 0x23
    278e:	7c a1       	ldd	r23, Y+36	; 0x24
    2790:	8d a1       	ldd	r24, Y+37	; 0x25
    2792:	9e a1       	ldd	r25, Y+38	; 0x26
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	40 e8       	ldi	r20, 0x80	; 128
    279a:	5f e3       	ldi	r21, 0x3F	; 63
    279c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27a0:	88 23       	and	r24, r24
    27a2:	2c f4       	brge	.+10     	; 0x27ae <LCD_displayCharacter+0x592>
		__ticks = 1;
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	9a a3       	std	Y+34, r25	; 0x22
    27aa:	89 a3       	std	Y+33, r24	; 0x21
    27ac:	3f c0       	rjmp	.+126    	; 0x282c <LCD_displayCharacter+0x610>
	else if (__tmp > 65535)
    27ae:	6b a1       	ldd	r22, Y+35	; 0x23
    27b0:	7c a1       	ldd	r23, Y+36	; 0x24
    27b2:	8d a1       	ldd	r24, Y+37	; 0x25
    27b4:	9e a1       	ldd	r25, Y+38	; 0x26
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	3f ef       	ldi	r19, 0xFF	; 255
    27ba:	4f e7       	ldi	r20, 0x7F	; 127
    27bc:	57 e4       	ldi	r21, 0x47	; 71
    27be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27c2:	18 16       	cp	r1, r24
    27c4:	4c f5       	brge	.+82     	; 0x2818 <LCD_displayCharacter+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27c6:	6f a1       	ldd	r22, Y+39	; 0x27
    27c8:	78 a5       	ldd	r23, Y+40	; 0x28
    27ca:	89 a5       	ldd	r24, Y+41	; 0x29
    27cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	40 e2       	ldi	r20, 0x20	; 32
    27d4:	51 e4       	ldi	r21, 0x41	; 65
    27d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	bc 01       	movw	r22, r24
    27e0:	cd 01       	movw	r24, r26
    27e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	9a a3       	std	Y+34, r25	; 0x22
    27ec:	89 a3       	std	Y+33, r24	; 0x21
    27ee:	0f c0       	rjmp	.+30     	; 0x280e <LCD_displayCharacter+0x5f2>
    27f0:	89 e1       	ldi	r24, 0x19	; 25
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	98 a3       	std	Y+32, r25	; 0x20
    27f6:	8f 8f       	std	Y+31, r24	; 0x1f
    27f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27fa:	98 a1       	ldd	r25, Y+32	; 0x20
    27fc:	01 97       	sbiw	r24, 0x01	; 1
    27fe:	f1 f7       	brne	.-4      	; 0x27fc <LCD_displayCharacter+0x5e0>
    2800:	98 a3       	std	Y+32, r25	; 0x20
    2802:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2804:	89 a1       	ldd	r24, Y+33	; 0x21
    2806:	9a a1       	ldd	r25, Y+34	; 0x22
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	9a a3       	std	Y+34, r25	; 0x22
    280c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    280e:	89 a1       	ldd	r24, Y+33	; 0x21
    2810:	9a a1       	ldd	r25, Y+34	; 0x22
    2812:	00 97       	sbiw	r24, 0x00	; 0
    2814:	69 f7       	brne	.-38     	; 0x27f0 <LCD_displayCharacter+0x5d4>
    2816:	14 c0       	rjmp	.+40     	; 0x2840 <LCD_displayCharacter+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2818:	6b a1       	ldd	r22, Y+35	; 0x23
    281a:	7c a1       	ldd	r23, Y+36	; 0x24
    281c:	8d a1       	ldd	r24, Y+37	; 0x25
    281e:	9e a1       	ldd	r25, Y+38	; 0x26
    2820:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	9a a3       	std	Y+34, r25	; 0x22
    282a:	89 a3       	std	Y+33, r24	; 0x21
    282c:	89 a1       	ldd	r24, Y+33	; 0x21
    282e:	9a a1       	ldd	r25, Y+34	; 0x22
    2830:	9e 8f       	std	Y+30, r25	; 0x1e
    2832:	8d 8f       	std	Y+29, r24	; 0x1d
    2834:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2836:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2838:	01 97       	sbiw	r24, 0x01	; 1
    283a:	f1 f7       	brne	.-4      	; 0x2838 <LCD_displayCharacter+0x61c>
    283c:	9e 8f       	std	Y+30, r25	; 0x1e
    283e:	8d 8f       	std	Y+29, r24	; 0x1d

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
    2840:	a5 e3       	ldi	r26, 0x35	; 53
    2842:	b0 e0       	ldi	r27, 0x00	; 0
    2844:	e5 e3       	ldi	r30, 0x35	; 53
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	80 81       	ld	r24, Z
    284a:	98 2f       	mov	r25, r24
    284c:	90 7f       	andi	r25, 0xF0	; 240
    284e:	fe 01       	movw	r30, r28
    2850:	ed 59       	subi	r30, 0x9D	; 157
    2852:	ff 4f       	sbci	r31, 0xFF	; 255
    2854:	80 81       	ld	r24, Z
    2856:	8f 70       	andi	r24, 0x0F	; 15
    2858:	89 2b       	or	r24, r25
    285a:	8c 93       	st	X, r24
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	a0 e8       	ldi	r26, 0x80	; 128
    2862:	bf e3       	ldi	r27, 0x3F	; 63
    2864:	89 8f       	std	Y+25, r24	; 0x19
    2866:	9a 8f       	std	Y+26, r25	; 0x1a
    2868:	ab 8f       	std	Y+27, r26	; 0x1b
    286a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    286c:	69 8d       	ldd	r22, Y+25	; 0x19
    286e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2870:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2872:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	4a e7       	ldi	r20, 0x7A	; 122
    287a:	53 e4       	ldi	r21, 0x43	; 67
    287c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2880:	dc 01       	movw	r26, r24
    2882:	cb 01       	movw	r24, r22
    2884:	8d 8b       	std	Y+21, r24	; 0x15
    2886:	9e 8b       	std	Y+22, r25	; 0x16
    2888:	af 8b       	std	Y+23, r26	; 0x17
    288a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    288c:	6d 89       	ldd	r22, Y+21	; 0x15
    288e:	7e 89       	ldd	r23, Y+22	; 0x16
    2890:	8f 89       	ldd	r24, Y+23	; 0x17
    2892:	98 8d       	ldd	r25, Y+24	; 0x18
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	40 e8       	ldi	r20, 0x80	; 128
    289a:	5f e3       	ldi	r21, 0x3F	; 63
    289c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28a0:	88 23       	and	r24, r24
    28a2:	2c f4       	brge	.+10     	; 0x28ae <LCD_displayCharacter+0x692>
		__ticks = 1;
    28a4:	81 e0       	ldi	r24, 0x01	; 1
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	9c 8b       	std	Y+20, r25	; 0x14
    28aa:	8b 8b       	std	Y+19, r24	; 0x13
    28ac:	3f c0       	rjmp	.+126    	; 0x292c <LCD_displayCharacter+0x710>
	else if (__tmp > 65535)
    28ae:	6d 89       	ldd	r22, Y+21	; 0x15
    28b0:	7e 89       	ldd	r23, Y+22	; 0x16
    28b2:	8f 89       	ldd	r24, Y+23	; 0x17
    28b4:	98 8d       	ldd	r25, Y+24	; 0x18
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	3f ef       	ldi	r19, 0xFF	; 255
    28ba:	4f e7       	ldi	r20, 0x7F	; 127
    28bc:	57 e4       	ldi	r21, 0x47	; 71
    28be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28c2:	18 16       	cp	r1, r24
    28c4:	4c f5       	brge	.+82     	; 0x2918 <LCD_displayCharacter+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c6:	69 8d       	ldd	r22, Y+25	; 0x19
    28c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28ce:	20 e0       	ldi	r18, 0x00	; 0
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	40 e2       	ldi	r20, 0x20	; 32
    28d4:	51 e4       	ldi	r21, 0x41	; 65
    28d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28da:	dc 01       	movw	r26, r24
    28dc:	cb 01       	movw	r24, r22
    28de:	bc 01       	movw	r22, r24
    28e0:	cd 01       	movw	r24, r26
    28e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e6:	dc 01       	movw	r26, r24
    28e8:	cb 01       	movw	r24, r22
    28ea:	9c 8b       	std	Y+20, r25	; 0x14
    28ec:	8b 8b       	std	Y+19, r24	; 0x13
    28ee:	0f c0       	rjmp	.+30     	; 0x290e <LCD_displayCharacter+0x6f2>
    28f0:	89 e1       	ldi	r24, 0x19	; 25
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	9a 8b       	std	Y+18, r25	; 0x12
    28f6:	89 8b       	std	Y+17, r24	; 0x11
    28f8:	89 89       	ldd	r24, Y+17	; 0x11
    28fa:	9a 89       	ldd	r25, Y+18	; 0x12
    28fc:	01 97       	sbiw	r24, 0x01	; 1
    28fe:	f1 f7       	brne	.-4      	; 0x28fc <LCD_displayCharacter+0x6e0>
    2900:	9a 8b       	std	Y+18, r25	; 0x12
    2902:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2904:	8b 89       	ldd	r24, Y+19	; 0x13
    2906:	9c 89       	ldd	r25, Y+20	; 0x14
    2908:	01 97       	sbiw	r24, 0x01	; 1
    290a:	9c 8b       	std	Y+20, r25	; 0x14
    290c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    290e:	8b 89       	ldd	r24, Y+19	; 0x13
    2910:	9c 89       	ldd	r25, Y+20	; 0x14
    2912:	00 97       	sbiw	r24, 0x00	; 0
    2914:	69 f7       	brne	.-38     	; 0x28f0 <LCD_displayCharacter+0x6d4>
    2916:	14 c0       	rjmp	.+40     	; 0x2940 <LCD_displayCharacter+0x724>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2918:	6d 89       	ldd	r22, Y+21	; 0x15
    291a:	7e 89       	ldd	r23, Y+22	; 0x16
    291c:	8f 89       	ldd	r24, Y+23	; 0x17
    291e:	98 8d       	ldd	r25, Y+24	; 0x18
    2920:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2924:	dc 01       	movw	r26, r24
    2926:	cb 01       	movw	r24, r22
    2928:	9c 8b       	std	Y+20, r25	; 0x14
    292a:	8b 8b       	std	Y+19, r24	; 0x13
    292c:	8b 89       	ldd	r24, Y+19	; 0x13
    292e:	9c 89       	ldd	r25, Y+20	; 0x14
    2930:	98 8b       	std	Y+16, r25	; 0x10
    2932:	8f 87       	std	Y+15, r24	; 0x0f
    2934:	8f 85       	ldd	r24, Y+15	; 0x0f
    2936:	98 89       	ldd	r25, Y+16	; 0x10
    2938:	01 97       	sbiw	r24, 0x01	; 1
    293a:	f1 f7       	brne	.-4      	; 0x2938 <LCD_displayCharacter+0x71c>
    293c:	98 8b       	std	Y+16, r25	; 0x10
    293e:	8f 87       	std	Y+15, r24	; 0x0f
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2940:	a8 e3       	ldi	r26, 0x38	; 56
    2942:	b0 e0       	ldi	r27, 0x00	; 0
    2944:	e8 e3       	ldi	r30, 0x38	; 56
    2946:	f0 e0       	ldi	r31, 0x00	; 0
    2948:	80 81       	ld	r24, Z
    294a:	87 7f       	andi	r24, 0xF7	; 247
    294c:	8c 93       	st	X, r24
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	a0 e8       	ldi	r26, 0x80	; 128
    2954:	bf e3       	ldi	r27, 0x3F	; 63
    2956:	8b 87       	std	Y+11, r24	; 0x0b
    2958:	9c 87       	std	Y+12, r25	; 0x0c
    295a:	ad 87       	std	Y+13, r26	; 0x0d
    295c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    295e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2960:	7c 85       	ldd	r23, Y+12	; 0x0c
    2962:	8d 85       	ldd	r24, Y+13	; 0x0d
    2964:	9e 85       	ldd	r25, Y+14	; 0x0e
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	4a e7       	ldi	r20, 0x7A	; 122
    296c:	53 e4       	ldi	r21, 0x43	; 67
    296e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	8f 83       	std	Y+7, r24	; 0x07
    2978:	98 87       	std	Y+8, r25	; 0x08
    297a:	a9 87       	std	Y+9, r26	; 0x09
    297c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    297e:	6f 81       	ldd	r22, Y+7	; 0x07
    2980:	78 85       	ldd	r23, Y+8	; 0x08
    2982:	89 85       	ldd	r24, Y+9	; 0x09
    2984:	9a 85       	ldd	r25, Y+10	; 0x0a
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	40 e8       	ldi	r20, 0x80	; 128
    298c:	5f e3       	ldi	r21, 0x3F	; 63
    298e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2992:	88 23       	and	r24, r24
    2994:	2c f4       	brge	.+10     	; 0x29a0 <LCD_displayCharacter+0x784>
		__ticks = 1;
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	9e 83       	std	Y+6, r25	; 0x06
    299c:	8d 83       	std	Y+5, r24	; 0x05
    299e:	3f c0       	rjmp	.+126    	; 0x2a1e <LCD_displayCharacter+0x802>
	else if (__tmp > 65535)
    29a0:	6f 81       	ldd	r22, Y+7	; 0x07
    29a2:	78 85       	ldd	r23, Y+8	; 0x08
    29a4:	89 85       	ldd	r24, Y+9	; 0x09
    29a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	3f ef       	ldi	r19, 0xFF	; 255
    29ac:	4f e7       	ldi	r20, 0x7F	; 127
    29ae:	57 e4       	ldi	r21, 0x47	; 71
    29b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29b4:	18 16       	cp	r1, r24
    29b6:	4c f5       	brge	.+82     	; 0x2a0a <LCD_displayCharacter+0x7ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    29bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    29be:	9e 85       	ldd	r25, Y+14	; 0x0e
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	40 e2       	ldi	r20, 0x20	; 32
    29c6:	51 e4       	ldi	r21, 0x41	; 65
    29c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	bc 01       	movw	r22, r24
    29d2:	cd 01       	movw	r24, r26
    29d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d8:	dc 01       	movw	r26, r24
    29da:	cb 01       	movw	r24, r22
    29dc:	9e 83       	std	Y+6, r25	; 0x06
    29de:	8d 83       	std	Y+5, r24	; 0x05
    29e0:	0f c0       	rjmp	.+30     	; 0x2a00 <LCD_displayCharacter+0x7e4>
    29e2:	89 e1       	ldi	r24, 0x19	; 25
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	9c 83       	std	Y+4, r25	; 0x04
    29e8:	8b 83       	std	Y+3, r24	; 0x03
    29ea:	8b 81       	ldd	r24, Y+3	; 0x03
    29ec:	9c 81       	ldd	r25, Y+4	; 0x04
    29ee:	01 97       	sbiw	r24, 0x01	; 1
    29f0:	f1 f7       	brne	.-4      	; 0x29ee <LCD_displayCharacter+0x7d2>
    29f2:	9c 83       	std	Y+4, r25	; 0x04
    29f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f6:	8d 81       	ldd	r24, Y+5	; 0x05
    29f8:	9e 81       	ldd	r25, Y+6	; 0x06
    29fa:	01 97       	sbiw	r24, 0x01	; 1
    29fc:	9e 83       	std	Y+6, r25	; 0x06
    29fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a00:	8d 81       	ldd	r24, Y+5	; 0x05
    2a02:	9e 81       	ldd	r25, Y+6	; 0x06
    2a04:	00 97       	sbiw	r24, 0x00	; 0
    2a06:	69 f7       	brne	.-38     	; 0x29e2 <LCD_displayCharacter+0x7c6>
    2a08:	14 c0       	rjmp	.+40     	; 0x2a32 <LCD_displayCharacter+0x816>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a0c:	78 85       	ldd	r23, Y+8	; 0x08
    2a0e:	89 85       	ldd	r24, Y+9	; 0x09
    2a10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	9e 83       	std	Y+6, r25	; 0x06
    2a1c:	8d 83       	std	Y+5, r24	; 0x05
    2a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a20:	9e 81       	ldd	r25, Y+6	; 0x06
    2a22:	9a 83       	std	Y+2, r25	; 0x02
    2a24:	89 83       	std	Y+1, r24	; 0x01
    2a26:	89 81       	ldd	r24, Y+1	; 0x01
    2a28:	9a 81       	ldd	r25, Y+2	; 0x02
    2a2a:	01 97       	sbiw	r24, 0x01	; 1
    2a2c:	f1 f7       	brne	.-4      	; 0x2a2a <LCD_displayCharacter+0x80e>
    2a2e:	9a 83       	std	Y+2, r25	; 0x02
    2a30:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2a32:	cd 59       	subi	r28, 0x9D	; 157
    2a34:	df 4f       	sbci	r29, 0xFF	; 255
    2a36:	0f b6       	in	r0, 0x3f	; 63
    2a38:	f8 94       	cli
    2a3a:	de bf       	out	0x3e, r29	; 62
    2a3c:	0f be       	out	0x3f, r0	; 63
    2a3e:	cd bf       	out	0x3d, r28	; 61
    2a40:	cf 91       	pop	r28
    2a42:	df 91       	pop	r29
    2a44:	1f 91       	pop	r17
    2a46:	0f 91       	pop	r16
    2a48:	08 95       	ret

00002a4a <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    2a4a:	df 93       	push	r29
    2a4c:	cf 93       	push	r28
    2a4e:	00 d0       	rcall	.+0      	; 0x2a50 <LCD_displayString+0x6>
    2a50:	0f 92       	push	r0
    2a52:	cd b7       	in	r28, 0x3d	; 61
    2a54:	de b7       	in	r29, 0x3e	; 62
    2a56:	9b 83       	std	Y+3, r25	; 0x03
    2a58:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a5a:	19 82       	std	Y+1, r1	; 0x01
    2a5c:	0e c0       	rjmp	.+28     	; 0x2a7a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2a5e:	89 81       	ldd	r24, Y+1	; 0x01
    2a60:	28 2f       	mov	r18, r24
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	8a 81       	ldd	r24, Y+2	; 0x02
    2a66:	9b 81       	ldd	r25, Y+3	; 0x03
    2a68:	fc 01       	movw	r30, r24
    2a6a:	e2 0f       	add	r30, r18
    2a6c:	f3 1f       	adc	r31, r19
    2a6e:	80 81       	ld	r24, Z
    2a70:	0e 94 0e 11 	call	0x221c	; 0x221c <LCD_displayCharacter>
		i++;
    2a74:	89 81       	ldd	r24, Y+1	; 0x01
    2a76:	8f 5f       	subi	r24, 0xFF	; 255
    2a78:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2a7a:	89 81       	ldd	r24, Y+1	; 0x01
    2a7c:	28 2f       	mov	r18, r24
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	8a 81       	ldd	r24, Y+2	; 0x02
    2a82:	9b 81       	ldd	r25, Y+3	; 0x03
    2a84:	fc 01       	movw	r30, r24
    2a86:	e2 0f       	add	r30, r18
    2a88:	f3 1f       	adc	r31, r19
    2a8a:	80 81       	ld	r24, Z
    2a8c:	88 23       	and	r24, r24
    2a8e:	39 f7       	brne	.-50     	; 0x2a5e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2a90:	0f 90       	pop	r0
    2a92:	0f 90       	pop	r0
    2a94:	0f 90       	pop	r0
    2a96:	cf 91       	pop	r28
    2a98:	df 91       	pop	r29
    2a9a:	08 95       	ret

00002a9c <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    2a9c:	df 93       	push	r29
    2a9e:	cf 93       	push	r28
    2aa0:	00 d0       	rcall	.+0      	; 0x2aa2 <LCD_goToRowColumn+0x6>
    2aa2:	00 d0       	rcall	.+0      	; 0x2aa4 <LCD_goToRowColumn+0x8>
    2aa4:	0f 92       	push	r0
    2aa6:	cd b7       	in	r28, 0x3d	; 61
    2aa8:	de b7       	in	r29, 0x3e	; 62
    2aaa:	8a 83       	std	Y+2, r24	; 0x02
    2aac:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    2aae:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab0:	28 2f       	mov	r18, r24
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	3d 83       	std	Y+5, r19	; 0x05
    2ab6:	2c 83       	std	Y+4, r18	; 0x04
    2ab8:	8c 81       	ldd	r24, Y+4	; 0x04
    2aba:	9d 81       	ldd	r25, Y+5	; 0x05
    2abc:	81 30       	cpi	r24, 0x01	; 1
    2abe:	91 05       	cpc	r25, r1
    2ac0:	c1 f0       	breq	.+48     	; 0x2af2 <LCD_goToRowColumn+0x56>
    2ac2:	2c 81       	ldd	r18, Y+4	; 0x04
    2ac4:	3d 81       	ldd	r19, Y+5	; 0x05
    2ac6:	22 30       	cpi	r18, 0x02	; 2
    2ac8:	31 05       	cpc	r19, r1
    2aca:	2c f4       	brge	.+10     	; 0x2ad6 <LCD_goToRowColumn+0x3a>
    2acc:	8c 81       	ldd	r24, Y+4	; 0x04
    2ace:	9d 81       	ldd	r25, Y+5	; 0x05
    2ad0:	00 97       	sbiw	r24, 0x00	; 0
    2ad2:	61 f0       	breq	.+24     	; 0x2aec <LCD_goToRowColumn+0x50>
    2ad4:	19 c0       	rjmp	.+50     	; 0x2b08 <LCD_goToRowColumn+0x6c>
    2ad6:	2c 81       	ldd	r18, Y+4	; 0x04
    2ad8:	3d 81       	ldd	r19, Y+5	; 0x05
    2ada:	22 30       	cpi	r18, 0x02	; 2
    2adc:	31 05       	cpc	r19, r1
    2ade:	69 f0       	breq	.+26     	; 0x2afa <LCD_goToRowColumn+0x5e>
    2ae0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ae2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ae4:	83 30       	cpi	r24, 0x03	; 3
    2ae6:	91 05       	cpc	r25, r1
    2ae8:	61 f0       	breq	.+24     	; 0x2b02 <LCD_goToRowColumn+0x66>
    2aea:	0e c0       	rjmp	.+28     	; 0x2b08 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    2aec:	8b 81       	ldd	r24, Y+3	; 0x03
    2aee:	89 83       	std	Y+1, r24	; 0x01
    2af0:	0b c0       	rjmp	.+22     	; 0x2b08 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    2af2:	8b 81       	ldd	r24, Y+3	; 0x03
    2af4:	80 5c       	subi	r24, 0xC0	; 192
    2af6:	89 83       	std	Y+1, r24	; 0x01
    2af8:	07 c0       	rjmp	.+14     	; 0x2b08 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2afa:	8b 81       	ldd	r24, Y+3	; 0x03
    2afc:	80 5f       	subi	r24, 0xF0	; 240
    2afe:	89 83       	std	Y+1, r24	; 0x01
    2b00:	03 c0       	rjmp	.+6      	; 0x2b08 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    2b02:	8b 81       	ldd	r24, Y+3	; 0x03
    2b04:	80 5b       	subi	r24, 0xB0	; 176
    2b06:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    2b08:	89 81       	ldd	r24, Y+1	; 0x01
    2b0a:	80 68       	ori	r24, 0x80	; 128
    2b0c:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <LCD_sendCommand>
}
    2b10:	0f 90       	pop	r0
    2b12:	0f 90       	pop	r0
    2b14:	0f 90       	pop	r0
    2b16:	0f 90       	pop	r0
    2b18:	0f 90       	pop	r0
    2b1a:	cf 91       	pop	r28
    2b1c:	df 91       	pop	r29
    2b1e:	08 95       	ret

00002b20 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2b20:	df 93       	push	r29
    2b22:	cf 93       	push	r28
    2b24:	00 d0       	rcall	.+0      	; 0x2b26 <LCD_displayStringRowColumn+0x6>
    2b26:	00 d0       	rcall	.+0      	; 0x2b28 <LCD_displayStringRowColumn+0x8>
    2b28:	cd b7       	in	r28, 0x3d	; 61
    2b2a:	de b7       	in	r29, 0x3e	; 62
    2b2c:	89 83       	std	Y+1, r24	; 0x01
    2b2e:	6a 83       	std	Y+2, r22	; 0x02
    2b30:	5c 83       	std	Y+4, r21	; 0x04
    2b32:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2b34:	89 81       	ldd	r24, Y+1	; 0x01
    2b36:	6a 81       	ldd	r22, Y+2	; 0x02
    2b38:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    2b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b40:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <LCD_displayString>
}
    2b44:	0f 90       	pop	r0
    2b46:	0f 90       	pop	r0
    2b48:	0f 90       	pop	r0
    2b4a:	0f 90       	pop	r0
    2b4c:	cf 91       	pop	r28
    2b4e:	df 91       	pop	r29
    2b50:	08 95       	ret

00002b52 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2b52:	df 93       	push	r29
    2b54:	cf 93       	push	r28
    2b56:	cd b7       	in	r28, 0x3d	; 61
    2b58:	de b7       	in	r29, 0x3e	; 62
    2b5a:	62 97       	sbiw	r28, 0x12	; 18
    2b5c:	0f b6       	in	r0, 0x3f	; 63
    2b5e:	f8 94       	cli
    2b60:	de bf       	out	0x3e, r29	; 62
    2b62:	0f be       	out	0x3f, r0	; 63
    2b64:	cd bf       	out	0x3d, r28	; 61
    2b66:	9a 8b       	std	Y+18, r25	; 0x12
    2b68:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2b6a:	89 89       	ldd	r24, Y+17	; 0x11
    2b6c:	9a 89       	ldd	r25, Y+18	; 0x12
    2b6e:	9e 01       	movw	r18, r28
    2b70:	2f 5f       	subi	r18, 0xFF	; 255
    2b72:	3f 4f       	sbci	r19, 0xFF	; 255
    2b74:	b9 01       	movw	r22, r18
    2b76:	4a e0       	ldi	r20, 0x0A	; 10
    2b78:	50 e0       	ldi	r21, 0x00	; 0
    2b7a:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <itoa>
   LCD_displayString(buff);
    2b7e:	ce 01       	movw	r24, r28
    2b80:	01 96       	adiw	r24, 0x01	; 1
    2b82:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <LCD_displayString>
}
    2b86:	62 96       	adiw	r28, 0x12	; 18
    2b88:	0f b6       	in	r0, 0x3f	; 63
    2b8a:	f8 94       	cli
    2b8c:	de bf       	out	0x3e, r29	; 62
    2b8e:	0f be       	out	0x3f, r0	; 63
    2b90:	cd bf       	out	0x3d, r28	; 61
    2b92:	cf 91       	pop	r28
    2b94:	df 91       	pop	r29
    2b96:	08 95       	ret

00002b98 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2b98:	df 93       	push	r29
    2b9a:	cf 93       	push	r28
    2b9c:	cd b7       	in	r28, 0x3d	; 61
    2b9e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <LCD_sendCommand>
}
    2ba6:	cf 91       	pop	r28
    2ba8:	df 91       	pop	r29
    2baa:	08 95       	ret

00002bac <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    2bac:	df 93       	push	r29
    2bae:	cf 93       	push	r28
    2bb0:	cd b7       	in	r28, 0x3d	; 61
    2bb2:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2bb4:	eb e2       	ldi	r30, 0x2B	; 43
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	82 e0       	ldi	r24, 0x02	; 2
    2bba:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2bbc:	ea e2       	ldi	r30, 0x2A	; 42
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	88 e1       	ldi	r24, 0x18	; 24
    2bc2:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    2bc4:	e0 e4       	ldi	r30, 0x40	; 64
    2bc6:	f0 e0       	ldi	r31, 0x00	; 0
    2bc8:	86 e8       	ldi	r24, 0x86	; 134
    2bca:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    2bcc:	e0 e4       	ldi	r30, 0x40	; 64
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    2bd2:	e9 e2       	ldi	r30, 0x29	; 41
    2bd4:	f0 e0       	ldi	r31, 0x00	; 0
    2bd6:	8c e0       	ldi	r24, 0x0C	; 12
    2bd8:	80 83       	st	Z, r24
}
    2bda:	cf 91       	pop	r28
    2bdc:	df 91       	pop	r29
    2bde:	08 95       	ret

00002be0 <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    2be0:	df 93       	push	r29
    2be2:	cf 93       	push	r28
    2be4:	0f 92       	push	r0
    2be6:	cd b7       	in	r28, 0x3d	; 61
    2be8:	de b7       	in	r29, 0x3e	; 62
    2bea:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2bec:	eb e2       	ldi	r30, 0x2B	; 43
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	80 81       	ld	r24, Z
    2bf2:	88 2f       	mov	r24, r24
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	80 72       	andi	r24, 0x20	; 32
    2bf8:	90 70       	andi	r25, 0x00	; 0
    2bfa:	00 97       	sbiw	r24, 0x00	; 0
    2bfc:	b9 f3       	breq	.-18     	; 0x2bec <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    2bfe:	ec e2       	ldi	r30, 0x2C	; 44
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	89 81       	ldd	r24, Y+1	; 0x01
    2c04:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    2c06:	0f 90       	pop	r0
    2c08:	cf 91       	pop	r28
    2c0a:	df 91       	pop	r29
    2c0c:	08 95       	ret

00002c0e <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    2c0e:	df 93       	push	r29
    2c10:	cf 93       	push	r28
    2c12:	cd b7       	in	r28, 0x3d	; 61
    2c14:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2c16:	eb e2       	ldi	r30, 0x2B	; 43
    2c18:	f0 e0       	ldi	r31, 0x00	; 0
    2c1a:	80 81       	ld	r24, Z
    2c1c:	88 23       	and	r24, r24
    2c1e:	dc f7       	brge	.-10     	; 0x2c16 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    2c20:	ec e2       	ldi	r30, 0x2C	; 44
    2c22:	f0 e0       	ldi	r31, 0x00	; 0
    2c24:	80 81       	ld	r24, Z
}
    2c26:	cf 91       	pop	r28
    2c28:	df 91       	pop	r29
    2c2a:	08 95       	ret

00002c2c <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    2c2c:	df 93       	push	r29
    2c2e:	cf 93       	push	r28
    2c30:	00 d0       	rcall	.+0      	; 0x2c32 <UART_sendString+0x6>
    2c32:	0f 92       	push	r0
    2c34:	cd b7       	in	r28, 0x3d	; 61
    2c36:	de b7       	in	r29, 0x3e	; 62
    2c38:	9b 83       	std	Y+3, r25	; 0x03
    2c3a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c3c:	19 82       	std	Y+1, r1	; 0x01
    2c3e:	0e c0       	rjmp	.+28     	; 0x2c5c <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2c40:	89 81       	ldd	r24, Y+1	; 0x01
    2c42:	28 2f       	mov	r18, r24
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	8a 81       	ldd	r24, Y+2	; 0x02
    2c48:	9b 81       	ldd	r25, Y+3	; 0x03
    2c4a:	fc 01       	movw	r30, r24
    2c4c:	e2 0f       	add	r30, r18
    2c4e:	f3 1f       	adc	r31, r19
    2c50:	80 81       	ld	r24, Z
    2c52:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <UART_sendByte>
		i++;
    2c56:	89 81       	ldd	r24, Y+1	; 0x01
    2c58:	8f 5f       	subi	r24, 0xFF	; 255
    2c5a:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2c5c:	89 81       	ldd	r24, Y+1	; 0x01
    2c5e:	28 2f       	mov	r18, r24
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	8a 81       	ldd	r24, Y+2	; 0x02
    2c64:	9b 81       	ldd	r25, Y+3	; 0x03
    2c66:	fc 01       	movw	r30, r24
    2c68:	e2 0f       	add	r30, r18
    2c6a:	f3 1f       	adc	r31, r19
    2c6c:	80 81       	ld	r24, Z
    2c6e:	88 23       	and	r24, r24
    2c70:	39 f7       	brne	.-50     	; 0x2c40 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2c72:	0f 90       	pop	r0
    2c74:	0f 90       	pop	r0
    2c76:	0f 90       	pop	r0
    2c78:	cf 91       	pop	r28
    2c7a:	df 91       	pop	r29
    2c7c:	08 95       	ret

00002c7e <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    2c7e:	0f 93       	push	r16
    2c80:	1f 93       	push	r17
    2c82:	df 93       	push	r29
    2c84:	cf 93       	push	r28
    2c86:	00 d0       	rcall	.+0      	; 0x2c88 <UART_receiveString+0xa>
    2c88:	0f 92       	push	r0
    2c8a:	cd b7       	in	r28, 0x3d	; 61
    2c8c:	de b7       	in	r29, 0x3e	; 62
    2c8e:	9b 83       	std	Y+3, r25	; 0x03
    2c90:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c92:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    2c94:	89 81       	ldd	r24, Y+1	; 0x01
    2c96:	28 2f       	mov	r18, r24
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c9e:	8c 01       	movw	r16, r24
    2ca0:	02 0f       	add	r16, r18
    2ca2:	13 1f       	adc	r17, r19
    2ca4:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <UART_recieveByte>
    2ca8:	f8 01       	movw	r30, r16
    2caa:	80 83       	st	Z, r24
    2cac:	0f c0       	rjmp	.+30     	; 0x2ccc <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    2cae:	89 81       	ldd	r24, Y+1	; 0x01
    2cb0:	8f 5f       	subi	r24, 0xFF	; 255
    2cb2:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2cb4:	89 81       	ldd	r24, Y+1	; 0x01
    2cb6:	28 2f       	mov	r18, r24
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	8a 81       	ldd	r24, Y+2	; 0x02
    2cbc:	9b 81       	ldd	r25, Y+3	; 0x03
    2cbe:	8c 01       	movw	r16, r24
    2cc0:	02 0f       	add	r16, r18
    2cc2:	13 1f       	adc	r17, r19
    2cc4:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <UART_recieveByte>
    2cc8:	f8 01       	movw	r30, r16
    2cca:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    2ccc:	89 81       	ldd	r24, Y+1	; 0x01
    2cce:	28 2f       	mov	r18, r24
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd4:	9b 81       	ldd	r25, Y+3	; 0x03
    2cd6:	fc 01       	movw	r30, r24
    2cd8:	e2 0f       	add	r30, r18
    2cda:	f3 1f       	adc	r31, r19
    2cdc:	80 81       	ld	r24, Z
    2cde:	83 32       	cpi	r24, 0x23	; 35
    2ce0:	31 f7       	brne	.-52     	; 0x2cae <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    2ce2:	89 81       	ldd	r24, Y+1	; 0x01
    2ce4:	28 2f       	mov	r18, r24
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cea:	9b 81       	ldd	r25, Y+3	; 0x03
    2cec:	fc 01       	movw	r30, r24
    2cee:	e2 0f       	add	r30, r18
    2cf0:	f3 1f       	adc	r31, r19
    2cf2:	10 82       	st	Z, r1
}
    2cf4:	0f 90       	pop	r0
    2cf6:	0f 90       	pop	r0
    2cf8:	0f 90       	pop	r0
    2cfa:	cf 91       	pop	r28
    2cfc:	df 91       	pop	r29
    2cfe:	1f 91       	pop	r17
    2d00:	0f 91       	pop	r16
    2d02:	08 95       	ret

00002d04 <__prologue_saves__>:
    2d04:	2f 92       	push	r2
    2d06:	3f 92       	push	r3
    2d08:	4f 92       	push	r4
    2d0a:	5f 92       	push	r5
    2d0c:	6f 92       	push	r6
    2d0e:	7f 92       	push	r7
    2d10:	8f 92       	push	r8
    2d12:	9f 92       	push	r9
    2d14:	af 92       	push	r10
    2d16:	bf 92       	push	r11
    2d18:	cf 92       	push	r12
    2d1a:	df 92       	push	r13
    2d1c:	ef 92       	push	r14
    2d1e:	ff 92       	push	r15
    2d20:	0f 93       	push	r16
    2d22:	1f 93       	push	r17
    2d24:	cf 93       	push	r28
    2d26:	df 93       	push	r29
    2d28:	cd b7       	in	r28, 0x3d	; 61
    2d2a:	de b7       	in	r29, 0x3e	; 62
    2d2c:	ca 1b       	sub	r28, r26
    2d2e:	db 0b       	sbc	r29, r27
    2d30:	0f b6       	in	r0, 0x3f	; 63
    2d32:	f8 94       	cli
    2d34:	de bf       	out	0x3e, r29	; 62
    2d36:	0f be       	out	0x3f, r0	; 63
    2d38:	cd bf       	out	0x3d, r28	; 61
    2d3a:	09 94       	ijmp

00002d3c <__epilogue_restores__>:
    2d3c:	2a 88       	ldd	r2, Y+18	; 0x12
    2d3e:	39 88       	ldd	r3, Y+17	; 0x11
    2d40:	48 88       	ldd	r4, Y+16	; 0x10
    2d42:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d44:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d46:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d48:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d4a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d4c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d4e:	b9 84       	ldd	r11, Y+9	; 0x09
    2d50:	c8 84       	ldd	r12, Y+8	; 0x08
    2d52:	df 80       	ldd	r13, Y+7	; 0x07
    2d54:	ee 80       	ldd	r14, Y+6	; 0x06
    2d56:	fd 80       	ldd	r15, Y+5	; 0x05
    2d58:	0c 81       	ldd	r16, Y+4	; 0x04
    2d5a:	1b 81       	ldd	r17, Y+3	; 0x03
    2d5c:	aa 81       	ldd	r26, Y+2	; 0x02
    2d5e:	b9 81       	ldd	r27, Y+1	; 0x01
    2d60:	ce 0f       	add	r28, r30
    2d62:	d1 1d       	adc	r29, r1
    2d64:	0f b6       	in	r0, 0x3f	; 63
    2d66:	f8 94       	cli
    2d68:	de bf       	out	0x3e, r29	; 62
    2d6a:	0f be       	out	0x3f, r0	; 63
    2d6c:	cd bf       	out	0x3d, r28	; 61
    2d6e:	ed 01       	movw	r28, r26
    2d70:	08 95       	ret

00002d72 <memset>:
    2d72:	dc 01       	movw	r26, r24
    2d74:	01 c0       	rjmp	.+2      	; 0x2d78 <memset+0x6>
    2d76:	6d 93       	st	X+, r22
    2d78:	41 50       	subi	r20, 0x01	; 1
    2d7a:	50 40       	sbci	r21, 0x00	; 0
    2d7c:	e0 f7       	brcc	.-8      	; 0x2d76 <memset+0x4>
    2d7e:	08 95       	ret

00002d80 <itoa>:
    2d80:	fb 01       	movw	r30, r22
    2d82:	9f 01       	movw	r18, r30
    2d84:	e8 94       	clt
    2d86:	42 30       	cpi	r20, 0x02	; 2
    2d88:	c4 f0       	brlt	.+48     	; 0x2dba <itoa+0x3a>
    2d8a:	45 32       	cpi	r20, 0x25	; 37
    2d8c:	b4 f4       	brge	.+44     	; 0x2dba <itoa+0x3a>
    2d8e:	4a 30       	cpi	r20, 0x0A	; 10
    2d90:	29 f4       	brne	.+10     	; 0x2d9c <itoa+0x1c>
    2d92:	97 fb       	bst	r25, 7
    2d94:	1e f4       	brtc	.+6      	; 0x2d9c <itoa+0x1c>
    2d96:	90 95       	com	r25
    2d98:	81 95       	neg	r24
    2d9a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d9c:	64 2f       	mov	r22, r20
    2d9e:	77 27       	eor	r23, r23
    2da0:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <__udivmodhi4>
    2da4:	80 5d       	subi	r24, 0xD0	; 208
    2da6:	8a 33       	cpi	r24, 0x3A	; 58
    2da8:	0c f0       	brlt	.+2      	; 0x2dac <itoa+0x2c>
    2daa:	89 5d       	subi	r24, 0xD9	; 217
    2dac:	81 93       	st	Z+, r24
    2dae:	cb 01       	movw	r24, r22
    2db0:	00 97       	sbiw	r24, 0x00	; 0
    2db2:	a1 f7       	brne	.-24     	; 0x2d9c <itoa+0x1c>
    2db4:	16 f4       	brtc	.+4      	; 0x2dba <itoa+0x3a>
    2db6:	5d e2       	ldi	r21, 0x2D	; 45
    2db8:	51 93       	st	Z+, r21
    2dba:	10 82       	st	Z, r1
    2dbc:	c9 01       	movw	r24, r18
    2dbe:	0c 94 e1 16 	jmp	0x2dc2	; 0x2dc2 <strrev>

00002dc2 <strrev>:
    2dc2:	dc 01       	movw	r26, r24
    2dc4:	fc 01       	movw	r30, r24
    2dc6:	67 2f       	mov	r22, r23
    2dc8:	71 91       	ld	r23, Z+
    2dca:	77 23       	and	r23, r23
    2dcc:	e1 f7       	brne	.-8      	; 0x2dc6 <strrev+0x4>
    2dce:	32 97       	sbiw	r30, 0x02	; 2
    2dd0:	04 c0       	rjmp	.+8      	; 0x2dda <strrev+0x18>
    2dd2:	7c 91       	ld	r23, X
    2dd4:	6d 93       	st	X+, r22
    2dd6:	70 83       	st	Z, r23
    2dd8:	62 91       	ld	r22, -Z
    2dda:	ae 17       	cp	r26, r30
    2ddc:	bf 07       	cpc	r27, r31
    2dde:	c8 f3       	brcs	.-14     	; 0x2dd2 <strrev+0x10>
    2de0:	08 95       	ret

00002de2 <__udivmodhi4>:
    2de2:	aa 1b       	sub	r26, r26
    2de4:	bb 1b       	sub	r27, r27
    2de6:	51 e1       	ldi	r21, 0x11	; 17
    2de8:	07 c0       	rjmp	.+14     	; 0x2df8 <__udivmodhi4_ep>

00002dea <__udivmodhi4_loop>:
    2dea:	aa 1f       	adc	r26, r26
    2dec:	bb 1f       	adc	r27, r27
    2dee:	a6 17       	cp	r26, r22
    2df0:	b7 07       	cpc	r27, r23
    2df2:	10 f0       	brcs	.+4      	; 0x2df8 <__udivmodhi4_ep>
    2df4:	a6 1b       	sub	r26, r22
    2df6:	b7 0b       	sbc	r27, r23

00002df8 <__udivmodhi4_ep>:
    2df8:	88 1f       	adc	r24, r24
    2dfa:	99 1f       	adc	r25, r25
    2dfc:	5a 95       	dec	r21
    2dfe:	a9 f7       	brne	.-22     	; 0x2dea <__udivmodhi4_loop>
    2e00:	80 95       	com	r24
    2e02:	90 95       	com	r25
    2e04:	bc 01       	movw	r22, r24
    2e06:	cd 01       	movw	r24, r26
    2e08:	08 95       	ret

00002e0a <_exit>:
    2e0a:	f8 94       	cli

00002e0c <__stop_program>:
    2e0c:	ff cf       	rjmp	.-2      	; 0x2e0c <__stop_program>
